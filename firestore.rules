/**
 * @fileoverview Firestore Security Rules for a basic ERP system.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model. Each user can only access data under their own user ID.
 *
 * Data Structure:
 * All data is nested under /users/{userId}, with subcollections for expenses, revenues, and appointments.
 *  /users/{userId}/expenses/{expenseId}
 *  /users/{userId}/revenues/{revenueId}
 *  /users/{userId}/appointments/{appointmentId}
 *
 * Key Security Decisions:
 * - Users can only access their own data.
 * - Listing other users' data is forbidden.
 * - Data validation is relaxed during prototyping to focus on authorization.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the request is authenticated.
     * @return {boolean} True if the request is authenticated, false otherwise.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the requested user ID matches the authenticated user ID.
     * @param {string} userId The user ID to check.
     * @return {boolean} True if the user IDs match, false otherwise.
     */
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    /**
     * @description Checks if the user is the owner and the document exists.
     * @param {string} userId The user ID to check.
     * @return {boolean} True if the user is the owner and the document exists, false otherwise.
     */
    function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
    }

    /**
     * @description Rules for expenses collection under a user.
     * @path /users/{userId}/expenses/{expenseId}
     * @allow (create) - User A can create an expense record under their own user ID.
     *    - auth.uid: "A"
     *    - path: /users/A/expenses/123
     * @allow (get, list) - User A can read their own expense records.
     *    - auth.uid: "A"
     *    - path: /users/A/expenses/123
     * @allow (update, delete) - User A can update or delete their own expense records.
     *    - auth.uid: "A"
     *    - path: /users/A/expenses/123
     * @deny (create, update, delete) - User A cannot modify User B's expense records.
     *    - auth.uid: "A"
     *    - path: /users/B/expenses/123
     * @principle Enforces document ownership for writes; allows owner-only access.
     */
    match /users/{userId}/expenses/{expenseId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Rules for revenues collection under a user.
     * @path /users/{userId}/revenues/{revenueId}
     * @allow (create) - User A can create a revenue record under their own user ID.
     *    - auth.uid: "A"
     *    - path: /users/A/revenues/123
     * @allow (get, list) - User A can read their own revenue records.
     *    - auth.uid: "A"
     *    - path: /users/A/revenues/123
     * @allow (update, delete) - User A can update or delete their own revenue records.
     *    - auth.uid: "A"
     *    - path: /users/A/revenues/123
     * @deny (create, update, delete) - User A cannot modify User B's revenue records.
     *    - auth.uid: "A"
     *    - path: /users/B/revenues/123
     * @principle Enforces document ownership for writes; allows owner-only access.
     */
    match /users/{userId}/revenues/{revenueId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Rules for appointments collection under a user.
     * @path /users/{userId}/appointments/{appointmentId}
     * @allow (create) - User A can create an appointment record under their own user ID.
     *    - auth.uid: "A"
     *    - path: /users/A/appointments/123
     * @allow (get, list) - User A can read their own appointment records.
     *    - auth.uid: "A"
     *    - path: /users/A/appointments/123
     * @allow (update, delete) - User A can update or delete their own appointment records.
     *    - auth.uid: "A"
     *    - path: /users/A/appointments/123
     * @deny (create, update, delete) - User A cannot modify User B's appointment records.
     *    - auth.uid: "A"
     *    - path: /users/B/appointments/123
     * @principle Enforces document ownership for writes; allows owner-only access.
     */
    match /users/{userId}/appointments/{appointmentId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }
  }
}