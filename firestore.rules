/**
 * @file Firestore Security Rules
 * @description This ruleset enforces a strict user-ownership model for the BizView application.
 *
 * Data Structure:
 * All user data and associated resources (expenses, revenue, appointments, raw materials) are nested under the `/users/{userId}` path.
 * This structure ensures that each user has a dedicated data tree, simplifying access control.
 *
 * Key Security Decisions:
 * - User listing is implicitly disallowed.
 * - All data is private and accessible only to the owning user.
 *
 * Authorization Independence:
 * Expenses, Revenue, Appointments, and Raw Materials collections are nested under each user's document.
 * This eliminates the need for `get()` calls in the security rules, ensuring atomic operations and simplifying debugging.
 *
 * Query Authorization Patterns (QAPs):
 * The structure supports secure `list` operations because collections are segregated under each user. The security rules only need to verify
 * if the `request.auth.uid` matches the `userId`.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the request is made by a signed-in user.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the authenticated user ID matches the provided user ID.
     */
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    /**
     * @description Checks if the authenticated user is the owner of the existing document.
     */
    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }

    /**
     * @description Enforces ownership for user documents.
     * @path /users/{userId}
     * @allow (create) User with ID 'user123' creates their own profile.
     * @deny (create) User with ID 'user123' attempts to create a profile for 'user456'.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;

      allow create: if isOwner(userId) && request.resource.data.id == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Enforces ownership for expense documents under a user.
     * @path /users/{userId}/expenses/{expenseId}
     * @allow (create) User with ID 'user123' creates an expense under their profile.
     * @deny (create) User with ID 'user123' attempts to create an expense under 'user456' profile.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId}/expenses/{expenseId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);

      allow create: if isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.userId == resource.data.userId;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Enforces ownership for revenue documents under a user.
     * @path /users/{userId}/revenue/{revenueId}
     * @allow (create) User with ID 'user123' creates a revenue record under their profile.
     * @deny (create) User with ID 'user123' attempts to create a revenue record under 'user456' profile.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId}/revenue/{revenueId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);

      allow create: if isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.userId == resource.data.userId;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Enforces ownership for appointment documents under a user.
     * @path /users/{userId}/appointments/{appointmentId}
     * @allow User with ID 'user123' creates an appointment under their profile.
     * @deny User with ID 'user123' attempts to create an appointment under 'user456' profile.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId}/appointments/{appointmentId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);

      allow create: if isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.userId == resource.data.userId;
      allow delete: if isExistingOwner(userId);
    }

     /**
      * @description Enforces ownership for raw materials documents under a user.
      * @path /users/{userId}/raw-materials/{rawMaterialId}
      * @allow User with ID 'user123' creates a raw material record under their profile.
      * @deny User with ID 'user123' attempts to create a raw material record under 'user456' profile.
      * @principle Enforces document ownership for writes.
      */
    match /users/{userId}/raw-materials/{rawMaterialId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);

      allow create: if isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.userId == resource.data.userId;
      allow delete: if isExistingOwner(userId);
    }

   /**
    * @description Catch-all rule to ensure all other paths are denied.  This MUST come last to prevent shadowing of other rules.
    * @path Any path not explicitly defined above
    * @allow None - all operations are denied.
    * @deny All operations are denied.
    * @principle Ensures no unauthorized access to undefined paths.
    */
    match /{path=**} {
      allow get: if false;
      allow list: if false;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }
  }
}