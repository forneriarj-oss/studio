/**
 * @fileoverview Firestore Security Rules for BizView application.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model for data access. Each user can only access data associated with their own user ID.
 *
 * Data Structure:
 * All user-related data (expenses, revenue, appointments, raw materials) is nested under the /users/{userId} path.
 *
 * Key Security Decisions:
 * - Users can only list collections under their own user ID.
 * - Write operations are restricted to the owner of the document.
 *
 * Denormalization for Authorization:
 * The `userId` is implicitly part of the path for all subcollections under `/users/{userId}`. Rules will ensure this path matches the authenticated user's UID.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Defines if the current user is signed in.
     * @params None
     * @return `true` if the request is authenticated, `false` otherwise.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the authenticated user ID matches the provided user ID.
     * @param {string} userId - The user ID to compare against.
     * @return `true` if the user is signed in and their UID matches the provided userId, `false` otherwise.
     */
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    /**
     * @description Checks if the authenticated user is the owner of an existing document.
     * @param {string} userId - The user ID to compare against.
     * @return `true` if the user is signed in, their UID matches the provided userId, and the document exists, `false` otherwise.
     */
    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }

    /**
     * @description Rule for the /users/{userId} document.
     * @path /users/{userId}
     * @allow (create) - User with UID 'user123' can create a document at /users/user123 if the 'id' field matches their UID.
     * @allow (get) - User with UID 'user123' can read their own profile document at /users/user123.
     * @deny  (create) - User with UID 'user456' cannot create a document at /users/user123.
     * @deny  (get) - User with UID 'user456' cannot read user profile document at /users/user123.
     * @principle Enforces document ownership for reads and writes.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false; // User listing is not permitted.
      allow create: if isOwner(userId) && request.resource.data.id == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Rule for the /users/{userId}/expenses/{expenseId} collection.
     * @path /users/{userId}/expenses/{expenseId}
     * @allow (create) - User with UID 'user123' can create an expense at /users/user123/expenses/expense1 if the 'userId' field matches their UID.
     * @allow (get) - User with UID 'user123' can read their own expense document at /users/user123/expenses/expense1.
     * @allow (list) - User with UID 'user123' can list their own expenses at /users/user123/expenses.
     * @deny  (create) - User with UID 'user456' cannot create an expense at /users/user123/expenses/expense1.
     * @deny  (get) - User with UID 'user456' cannot read user's expense document at /users/user123/expenses/expense1.
     * @principle Enforces document ownership for reads and writes.
     */
    match /users/{userId}/expenses/{expenseId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.userId == resource.data.userId;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Rule for the /users/{userId}/revenue/{revenueId} collection.
     * @path /users/{userId}/revenue/{revenueId}
     * @allow (create) - User with UID 'user123' can create revenue at /users/user123/revenue/revenue1 if the 'userId' field matches their UID.
     * @allow (get) - User with UID 'user123' can read their own revenue document at /users/user123/revenue/revenue1.
     * @allow (list) - User with UID 'user123' can list their own revenue at /users/user123/revenue.
     * @deny  (create) - User with UID 'user456' cannot create revenue at /users/user123/revenue/revenue1.
     * @deny  (get) - User with UID 'user456' cannot read user's revenue document at /users/user123/revenue/revenue1.
     * @principle Enforces document ownership for reads and writes.
     */
    match /users/{userId}/revenue/{revenueId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.userId == resource.data.userId;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Rule for the /users/{userId}/appointments/{appointmentId} collection.
     * @path /users/{userId}/appointments/{appointmentId}
     * @allow (create) - User with UID 'user123' can create an appointment at /users/user123/appointments/appointment1 if the 'userId' field matches their UID.
     * @allow (get) - User with UID 'user123' can read their own appointment document at /users/user123/appointments/appointment1.
     * @allow (list) - User with UID 'user123' can list their own appointments at /users/user123/appointments.
     * @deny  (create) - User with UID 'user456' cannot create an appointment at /users/user123/appointments/appointment1.
     * @deny  (get) - User with UID 'user456' cannot read user's appointment document at /users/user123/appointments/appointment1.
     * @principle Enforces document ownership for reads and writes.
     */
    match /users/{userId}/appointments/{appointmentId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.userId == resource.data.userId;
      allow delete: if isExistingOwner(userId);
    }
      /**
     * @description Rule for the /users/{userId}/raw-materials/{rawMaterialId} collection.
     * @path /users/{userId}/raw-materials/{rawMaterialId}
     * @allow (create) - User with UID 'user123' can create raw material at /users/user123/raw-materials/rawMaterial1 if the 'userId' field matches their UID.
     * @allow (get) - User with UID 'user123' can read their own raw material document at /users/user123/raw-materials/rawMaterial1.
     * @allow (list) - User with UID 'user123' can list their own raw materials at /users/user123/raw-materials.
     * @deny  (create) - User with UID 'user456' cannot create raw material at /users/user123/raw-materials/rawMaterial1.
     * @deny  (get) - User with UID 'user456' cannot read user's raw material document at /users/user123/raw-materials/rawMaterial1.
     * @principle Enforces document ownership for reads and writes.
     */
    match /users/{userId}/raw-materials/{rawMaterialId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.userId == resource.data.userId;
      allow delete: if isExistingOwner(userId);
    }
  }
}