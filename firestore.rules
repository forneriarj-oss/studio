/**
 * @file Firestore Security Rules
 * @description This ruleset enforces a strict user-ownership model for all data. Each user has a dedicated data tree under `/users/{userId}`, and only the authenticated user can access their own data.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profile information.
 * - /users/{userId}/expenses/{expenseId}: Stores expense records for a specific user.
 * - /users/{userId}/revenues/{revenueId}: Stores revenue records for a specific user.
 * - /users/{userId}/appointments/{appointmentId}: Stores appointment records for a specific user.
 *
 * Key Security Decisions:
 * - User data is strictly segregated. Users can only access their own data; cross-user access is denied.
 * - List operations are restricted to the owning user for all user-scoped subcollections.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to determine if the request is from the resource owner
    function isOwner(userId) {
      return request.auth != null && request.auth.uid == userId;
    }

    // Helper function to determine if the request is from an existing resource owner
    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }

    // Match root-level users collection
    /**
     * @description Allows a user to create their own user document and manage their profile.
     * @path /users/{userId}
     * @allow (create) - User with ID 'user123' creates a new user document with id 'user123'.
     * @deny (create) - User with ID 'user123' attempts to create a document with id 'user456'.
     * @principle Enforces document ownership and prevents unauthorized user creation.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId) && request.resource.data.id == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(userId);
    }

    // Match expenses subcollection
    /**
     * @description Allows a user to manage their expense records.
     * @path /users/{userId}/expenses/{expenseId}
     * @allow (create) - User with ID 'user123' creates a new expense record under /users/user123/expenses.
     * @deny (update) - User with ID 'user123' attempts to update an expense record under /users/user456/expenses.
     * @principle Enforces document ownership and prevents cross-user data modification.
     */
    match /users/{userId}/expenses/{expenseId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isExistingOwner(userId) && resource.data.userId == userId;
      allow delete: if isExistingOwner(userId);
    }

    // Match revenues subcollection
    /**
     * @description Allows a user to manage their revenue records.
     * @path /users/{userId}/revenues/{revenueId}
     * @allow (create) - User with ID 'user123' creates a new revenue record under /users/user123/revenues.
     * @deny (update) - User with ID 'user123' attempts to update a revenue record under /users/user456/revenues.
     * @principle Enforces document ownership and prevents cross-user data modification.
     */
    match /users/{userId}/revenues/{revenueId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isExistingOwner(userId) && resource.data.userId == userId;
      allow delete: if isExistingOwner(userId);
    }

    // Match appointments subcollection
    /**
     * @description Allows a user to manage their appointment records.
     * @path /users/{userId}/appointments/{appointmentId}
     * @allow (create) - User with ID 'user123' creates a new appointment record under /users/user123/appointments.
     * @deny (update) - User with ID 'user123' attempts to update an appointment record under /users/user456/appointments.
     * @principle Enforces document ownership and prevents cross-user data modification.
     */
    match /users/{userId}/appointments/{appointmentId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isExistingOwner(userId) && resource.data.userId == userId;
      allow delete: if isExistingOwner(userId);
    }
  }
}