/**
 * @file Firestore Security Rules
 * @core-philosophy This ruleset enforces a strict user-ownership model for all data. Each user has a private data tree rooted at /users/{userId}.
 * @data-structure All data is nested under /users/{userId}, ensuring that only the authenticated user can access their own data.
 * @key-security-decisions User listing is disallowed. All write operations require the user to be authenticated and the owner of the data.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the request is authenticated.
     * @path N/A
     * @allow N/A
     * @deny N/A
     * @principle Requires authentication for all operations.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the requested user ID matches the authenticated user's ID.
     * @path N/A
     * @allow N/A
     * @deny N/A
     * @principle Enforces user ownership.
     */
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    /**
     * @description Checks if the requested user ID matches the authenticated user's ID, and that the resource exists.
     * @path N/A
     * @allow N/A
     * @deny N/A
     * @principle Enforces user ownership and resource existence.
     */
    function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
    }

    /**
     * @description Enforces that a user can only read/write their own profile.
     * @path /users/{userId}
     * @allow (get) User with ID 'user123' can read their own profile.
     * @allow (create) User with ID 'user123' can create their own profile.
     * @allow (update) User with ID 'user123' can update their own profile.
     * @allow (delete) User with ID 'user123' can delete their own profile.
     * @deny (get) User with ID 'user456' cannot read the profile of user with ID 'user123'.
     * @deny (create) User with ID 'user456' cannot create the profile of user with ID 'user123'.
     * @principle Enforces document ownership for writes and reads.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false; // No listing of all users

      allow create: if isOwner(userId) && request.resource.data.id == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Enforces that a user can only read/write their own expenses.
     * @path /users/{userId}/expenses/{expenseId}
     * @allow (get) User with ID 'user123' can read their own expense with ID 'expense456'.
     * @allow (create) User with ID 'user123' can create an expense.
     * @allow (update) User with ID 'user123' can update their own expense with ID 'expense456'.
     * @allow (delete) User with ID 'user123' can delete their own expense with ID 'expense456'.
     * @deny (get) User with ID 'user456' cannot read the expense of user with ID 'user123'.
     * @deny (create) User with ID 'user456' cannot create an expense for user with ID 'user123'.
     * @principle Enforces document ownership for writes and reads.
     */
    match /users/{userId}/expenses/{expenseId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);

      allow create: if isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.userId == resource.data.userId;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Enforces that a user can only read/write their own revenue records.
     * @path /users/{userId}/revenue/{revenueId}
     * @allow (get) User with ID 'user123' can read their own revenue record with ID 'revenue456'.
     * @allow (create) User with ID 'user123' can create a revenue record.
     * @allow (update) User with ID 'user123' can update their own revenue record with ID 'revenue456'.
     * @allow (delete) User with ID 'user123' can delete their own revenue record with ID 'revenue456'.
     * @deny (get) User with ID 'user456' cannot read the revenue record of user with ID 'user123'.
     * @deny (create) User with ID 'user456' cannot create a revenue record for user with ID 'user123'.
     * @principle Enforces document ownership for writes and reads.
     */
    match /users/{userId}/revenue/{revenueId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);

      allow create: if isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.userId == resource.data.userId;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Enforces that a user can only read/write their own appointments.
     * @path /users/{userId}/appointments/{appointmentId}
     * @allow (get) User with ID 'user123' can read their own appointment with ID 'appointment456'.
     * @allow (create) User with ID 'user123' can create an appointment.
     * @allow (update) User with ID 'user123' can update their own appointment with ID 'appointment456'.
     * @allow (delete) User with ID 'user123' can delete their own appointment with ID 'appointment456'.
     * @deny (get) User with ID 'user456' cannot read the appointment of user with ID 'user123'.
     * @deny (create) User with ID 'user456' cannot create an appointment for user with ID 'user123'.
     * @principle Enforces document ownership for writes and reads.
     */
    match /users/{userId}/appointments/{appointmentId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);

      allow create: if isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.userId == resource.data.userId;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Enforces that a user can only read/write their own appointment summaries.
     * @path /users/{userId}/appointments/{appointmentId}/summary
     * @allow (get) User with ID 'user123' can read their own appointment summary.
     * @allow (create) User with ID 'user123' can create an appointment summary.
     * @allow (update) User with ID 'user123' can update their own appointment summary.
     * @allow (delete) User with ID 'user123' can delete their own appointment summary.
     * @deny (get) User with ID 'user456' cannot read the appointment summary of user with ID 'user123'.
     * @deny (create) User with ID 'user456' cannot create an appointment summary for user with ID 'user123'.
     * @principle Enforces document ownership for writes and reads.
     */
    match /users/{userId}/appointments/{appointmentId}/summary {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);

      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

       /**
     * @description Enforces that a user can only read/write their own finished products.
     * @path /users/{userId}/finished-products/{productId}
     * @allow (get) User with ID 'user123' can read their own finished product with ID 'product456'.
     * @allow (create) User with ID 'user123' can create a finished product.
     * @allow (update) User with ID 'user123' can update their own finished product with ID 'product456'.
     * @allow (delete) User with ID 'user123' can delete their own finished product with ID 'product456'.
     * @deny (get) User with ID 'user456' cannot read the finished product of user with ID 'user123'.
     * @deny (create) User with ID 'user456' cannot create a finished product for user with ID 'user123'.
     * @principle Enforces document ownership for writes and reads.
     */
    match /users/{userId}/finished-products/{productId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);

      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }
  }
}