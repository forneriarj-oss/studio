/**
 * @file Firestore Security Rules
 * @core-philosophy This ruleset enforces a strict user-ownership model.  Each user has exclusive access to their own data tree nested under `/users/{userId}`.
 * @data-structure All user-related data (expenses, revenues, appointments) is nested under `/users/{userId}`.  This structure enables path-based authorization, avoiding costly `get()` calls and ensuring authorization independence.
 * @key-security-decisions
 *   - User listing is disallowed.
 *   - Write operations are restricted to the authenticated user matching the `userId` in the path.
 *   - Data validation is minimized to focus on authorization and relational integrity, allowing for flexible data shapes during prototyping.
 *   -  All subcollections are secured using path-based ownership. A user can only list collections under their own `userId`.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the request is made by a signed-in user.
     * @example isSignedIn() == true if request.auth != null
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the authenticated user's ID matches the provided userId.
     * @param {string} userId - The user ID to compare against.
     * @example isOwner("user123") == (request.auth.uid == "user123")
     */
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    /**
     * @description Checks if the authenticated user is the owner of an existing resource.
     * @param {string} userId - The user ID to compare against.
     * @example isExistingOwner("user123") == (isOwner("user123") && resource != null)
     */
    function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
    }

    /**
     * @description Rules for the /users/{userId} collection.
     * @path /databases/{database}/documents/users/{userId}
     * @allow (create) - An authenticated user can create their own user document if the userId matches their auth.uid.
     * @allow (get, update, delete) - An authenticated user can read, update, and delete their own user document.
     * @deny (create) - An unauthenticated user cannot create a user document.
     * @deny (update, delete) - An authenticated user cannot modify someone else's user document.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false; // User listing is not permitted

      allow create: if isOwner(userId) && request.resource.data.id == request.auth.uid;
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Rules for the /users/{userId}/expenses/{expenseId} collection.
     * @path /databases/{database}/documents/users/{userId}/expenses/{expenseId}
     * @allow (create) - An authenticated user can create an expense document under their user document.
     * @allow (get, list, update, delete) - An authenticated user can read, list, update, and delete expense documents under their user document.
     * @deny (create) - An unauthenticated user cannot create an expense document.
     * @deny (update, delete) - An authenticated user cannot modify someone else's expense document.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/expenses/{expenseId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);

      allow create: if isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.userId == resource.data.userId;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Rules for the /users/{userId}/revenues/{revenueId} collection.
     * @path /databases/{database}/documents/users/{userId}/revenues/{revenueId}
     * @allow (create) - An authenticated user can create a revenue document under their user document.
     * @allow (get, list, update, delete) - An authenticated user can read, list, update, and delete revenue documents under their user document.
     * @deny (create) - An unauthenticated user cannot create a revenue document.
     * @deny (update, delete) - An authenticated user cannot modify someone else's revenue document.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/revenues/{revenueId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);

      allow create: if isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.userId == resource.data.userId;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Rules for the /users/{userId}/appointments/{appointmentId} collection.
     * @path /databases/{database}/documents/users/{userId}/appointments/{appointmentId}
     * @allow (create) - An authenticated user can create an appointment document under their user document.
     * @allow (get, list, update, delete) - An authenticated user can read, list, update, and delete appointment documents under their user document.
     * @deny (create) - An unauthenticated user cannot create an appointment document.
     * @deny (update, delete) - An authenticated user cannot modify someone else's appointment document.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/appointments/{appointmentId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);

      allow create: if isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.userId == resource.data.userId;
      allow delete: if isExistingOwner(userId);
    }
  }
}