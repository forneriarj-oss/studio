/**
 * @fileoverview Firestore Security Rules for a user-centric ERP application.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model, ensuring that each user can only
 * access their own data related to expenses, revenues, and appointments.  No listing of all
 * users is allowed.
 *
 * Data Structure:
 * All data is nested under /users/{userId}, with subcollections for expenses, revenues, and
 * appointments.
 *
 * Key Security Decisions:
 * - User data is completely isolated. Users can only access data under their own UID.
 * - Listing of all users is disallowed.
 * - All write operations require a valid, authenticated user.
 *
 * Denormalization for Authorization:
 *  The user ID is part of the document path (/users/{userId}/...), making it simple to
 *  validate ownership using the `isOwner()` helper function.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to check if the request is authenticated.
    function isSignedIn() {
      return request.auth != null;
    }

    // Helper function to check if the authenticated user ID matches the requested user ID.
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    // Helper function to check if the authenticated user ID matches the existing document's owner ID.
    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }

    /**
     * @description Secures access to user-specific expense records.
     * @path /users/{userId}/expenses/{expenseId}
     * @allow (create) Authenticated user with UID 'user123' can create a new expense record under /users/user123/expenses.
     * @allow (update) Authenticated user with UID 'user123' can update an existing expense record under /users/user123/expenses/expense456.
     * @allow (delete) Authenticated user with UID 'user123' can delete an existing expense record under /users/user123/expenses/expense456.
     * @allow (get) Authenticated user with UID 'user123' can get expense record under /users/user123/expenses/expense456.
     * @allow (list) Authenticated user with UID 'user123' can list expense records under /users/user123/expenses.
     * @deny (create) Authenticated user with UID 'user456' cannot create an expense record under /users/user123/expenses.
     * @deny (update) Authenticated user with UID 'user456' cannot update an expense record under /users/user123/expenses/expense456.
     * @deny (delete) Authenticated user with UID 'user456' cannot delete an expense record under /users/user123/expenses/expense456.
     * @principle Enforces document ownership for writes and restricts access to a user's own data tree.
     */
    match /users/{userId}/expenses/{expenseId} {
      // Read rules: get and list
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);

      // Write rules: create, update, delete
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Secures access to user-specific revenue records.
     * @path /users/{userId}/revenues/{revenueId}
     * @allow (create) Authenticated user with UID 'user123' can create a new revenue record under /users/user123/revenues.
     * @allow (update) Authenticated user with UID 'user123' can update an existing revenue record under /users/user123/revenues/revenue456.
     * @allow (delete) Authenticated user with UID 'user123' can delete an existing revenue record under /users/user123/revenues/revenue456.
     * @allow (get) Authenticated user with UID 'user123' can get revenue record under /users/user123/revenues/revenue456.
     * @allow (list) Authenticated user with UID 'user123' can list revenue records under /users/user123/revenues.
     * @deny (create) Authenticated user with UID 'user456' cannot create a revenue record under /users/user123/revenues.
     * @deny (update) Authenticated user with UID 'user456' cannot update a revenue record under /users/user123/revenues/revenue456.
     * @deny (delete) Authenticated user with UID 'user456' cannot delete a revenue record under /users/user123/revenues/revenue456.
     * @principle Enforces document ownership for writes and restricts access to a user's own data tree.
     */
    match /users/{userId}/revenues/{revenueId} {
      // Read rules: get and list
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);

      // Write rules: create, update, delete
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Secures access to user-specific appointment records.
     * @path /users/{userId}/appointments/{appointmentId}
     * @allow (create) Authenticated user with UID 'user123' can create a new appointment record under /users/user123/appointments.
     * @allow (update) Authenticated user with UID 'user123' can update an existing appointment record under /users/user123/appointments/appointment456.
     * @allow (delete) Authenticated user with UID 'user123' can delete an existing appointment record under /users/user123/appointments/appointment456.
     * @allow (get) Authenticated user with UID 'user123' can get appointment record under /users/user123/appointments/appointment456.
     * @allow (list) Authenticated user with UID 'user123' can list appointment records under /users/user123/appointments.
     * @deny (create) Authenticated user with UID 'user456' cannot create an appointment record under /users/user123/appointments.
     * @deny (update) Authenticated user with UID 'user456' cannot update an appointment record under /users/user123/appointments/appointment456.
     * @deny (delete) Authenticated user with UID 'user456' cannot delete an appointment record under /users/user123/appointments/appointment456.
     * @principle Enforces document ownership for writes and restricts access to a user's own data tree.
     */
    match /users/{userId}/appointments/{appointmentId} {
      // Read rules: get and list
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);

      // Write rules: create, update, delete
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }
  }
}