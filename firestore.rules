/**
 * @fileoverview Firestore Security Rules for BizView application.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model for user profiles and
 * businesses. Businesses own expenses, revenues, and appointments.
 * Authorization is enforced through path-based checks and denormalized
 * `ownerId` and `businessId` fields, avoiding the need for `get()` calls in
 * security rules.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profiles. Only the authenticated user can
 *   access their own profile.
 * - /businesses/{businessId}: Stores business data. Each business has an
 *   `ownerId` field indicating the owning user.
 * - /businesses/{businessId}/expenses/{expenseId}: Stores expenses for a
 *   business.
 * - /businesses/{businessId}/revenues/{revenueId}: Stores revenues for a
 *   business.
 * - /businesses/{businessId}/appointments/{appointmentId}: Stores
 *   appointments for a business.
 *
 * Key Security Decisions:
 * - User listing is disallowed.
 * - Public read access is not generally permitted except where explicitly noted.
 * - Data validation is relaxed to support rapid prototyping, focusing on
 *   ownership and relational integrity checks.
 *
 * Denormalization for Authorization:
 * - The `Business` document includes an `ownerId` field.
 * - `Expense`, `Revenue` and `Appointment` documents include a `businessId`
 *   field.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Enforces user-ownership for user profiles.
     * @path /users/{userId}
     * @allow (get, create, update, delete, list): User '5FJJv6raB0hDsi1cirAUcpNT3L92' can access their own profile.
     * @deny (get, create, update, delete, list): User ' অন্যUID' cannot access user '5FJJv6raB0hDsi1cirAUcpNT3L92' profile.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      function isOwner(userId) {
        return request.auth.uid == userId;
      }
      function isSignedIn() {
        return request.auth != null;
      }
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isOwner(userId);
      allow delete: if isSignedIn() && isOwner(userId);
    }

    /**
     * @description Enforces user-ownership for business.
     * @path /businesses/{businessId}
     * @allow (get, create, update, delete, list): User '5FJJv6raB0hDsi1cirAUcpNT3L92' can access their own business.
     * @deny (get, create, update, delete, list): User ' অন্যUID' cannot access business owned by user '5FJJv6raB0hDsi1cirAUcpNT3L92'.
     * @principle Enforces document ownership for all operations.
     */
    match /businesses/{businessId} {
      function isOwner() {
        return request.auth.uid == resource.data.ownerId;
      }
      function isNewOwner() {
        return request.auth.uid == request.resource.data.ownerId;
      }
      function isSignedIn() {
        return request.auth != null;
      }

      allow get: if isSignedIn() && isOwner();
      allow list: if false;
      allow create: if isSignedIn() && isNewOwner();
      allow update: if isSignedIn() && isOwner();
      allow delete: if isSignedIn() && isOwner();
    }

    /**
     * @description Enforces user-ownership for expenses under a business.
     * @path /businesses/{businessId}/expenses/{expenseId}
     * @allow (get, create, update, delete, list): User '5FJJv6raB0hDsi1cirAUcpNT3L92' can access their own expense for the business.
     * @deny (get, create, update, delete, list): User ' অন্যUID' cannot access expense owned by user '5FJJv6raB0hDsi1cirAUcpNT3L92'.
     * @principle Enforces document ownership for all operations.
     */
    match /businesses/{businessId}/expenses/{expenseId} {
        function isBusinessOwner(businessId) {
          return get(/databases/$(database)/documents/businesses/$(businessId)).data.ownerId == request.auth.uid;
        }
        function isSignedIn() {
          return request.auth != null;
        }

        allow get: if isSignedIn() && isBusinessOwner(businessId);
        allow list: if false;
        allow create: if isSignedIn() && isBusinessOwner(businessId);
        allow update: if isSignedIn() && isBusinessOwner(businessId);
        allow delete: if isSignedIn() && isBusinessOwner(businessId);
    }

    /**
     * @description Enforces user-ownership for revenues under a business.
     * @path /businesses/{businessId}/revenues/{revenueId}
     * @allow (get, create, update, delete, list): User '5FJJv6raB0hDsi1cirAUcpNT3L92' can access their own revenue for the business.
     * @deny (get, create, update, delete, list): User ' অন্যUID' cannot access revenue owned by user '5FJJv6raB0hDsi1cirAUcpNT3L92'.
     * @principle Enforces document ownership for all operations.
     */
    match /businesses/{businessId}/revenues/{revenueId} {
      function isBusinessOwner(businessId) {
        return get(/databases/$(database)/documents/businesses/$(businessId)).data.ownerId == request.auth.uid;
      }
      function isSignedIn() {
        return request.auth != null;
      }

        allow get: if isSignedIn() && isBusinessOwner(businessId);
        allow list: if false;
        allow create: if isSignedIn() && isBusinessOwner(businessId);
        allow update: if isSignedIn() && isBusinessOwner(businessId);
        allow delete: if isSignedIn() && isBusinessOwner(businessId);
    }

    /**
     * @description Enforces user-ownership for appointments under a business.
     * @path /businesses/{businessId}/appointments/{appointmentId}
     * @allow (get, create, update, delete, list): User '5FJJv6raB0hDsi1cirAUcpNT3L92' can access their own appointment for the business.
     * @deny (get, create, update, delete, list): User ' অন্যUID' cannot access appointment owned by user '5FJJv6raB0hDsi1cirAUcpNT3L92'.
     * @principle Enforces document ownership for all operations.
     */
    match /businesses/{businessId}/appointments/{appointmentId} {
      function isBusinessOwner(businessId) {
        return get(/databases/$(database)/documents/businesses/$(businessId)).data.ownerId == request.auth.uid;
      }
      function isSignedIn() {
        return request.auth != null;
      }

        allow get: if isSignedIn() && isBusinessOwner(businessId);
        allow list: if false;
        allow create: if isSignedIn() && isBusinessOwner(businessId);
        allow update: if isSignedIn() && isBusinessOwner(businessId);
        allow delete: if isSignedIn() && isBusinessOwner(businessId);
    }

    /**
     * @description This rule is to fix the error reported by NextJS.
     * @path /users/{userId}/settings/app-settings
     */
    match /users/{userId}/settings/{document=**} {
      function isOwner(userId) {
        return request.auth.uid == userId;
      }
        function isSignedIn() {
          return request.auth != null;
        }
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isOwner(userId);
      allow delete: if isSignedIn() && isOwner(userId);
    }
  }
}