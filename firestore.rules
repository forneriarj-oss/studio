/**
 * @description This ruleset enforces a strict user-ownership model, where users can only access data associated with their own user ID.
 * @dataStructure All data is nested under /users/{userId}, creating a clear hierarchy of user-owned resources.
 * @keySecurityDecisions Listing of users is disallowed. Write access is restricted to the owner of the resource.
 *
 *  Denormalization for Authorization: To create simpler, more performant rules, always denormalize (copy) data required for an authorization decision directly onto the documents being secured.
 *  Structural Segregation: When data can be both private and public (e.g., drafts vs. published content), prefer using separate collections (a private user subcollection and a public top-level collection). This pattern is more secure and performant for list operations than using a single collection with a boolean flag.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Prevents listing all users.
     * @path /users
     * @allow None - Listing all users is disallowed.
     * @deny Attempt to list all user documents.
     * @principle Listing all users is a security risk.
     */
    match /users {
      allow list: if false;
    }

    /**
     * @description Allows a user to read, create, update, and delete their own user document.
     * @path /users/{userId}
     * @allow (create) - User can create their own document if the userId matches their auth.uid.
     * @allow (get, update, delete) - User can read, update, and delete their own document if authenticated and the userId matches their auth.uid.
     * @deny (create, update, delete) - User cannot create, update, or delete another user's document.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isOwner(userId) && resource != null;
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description Allows a user to read, create, update, and delete their own app settings.
     * @path /users/{userId}/settings/app-settings
     * @allow (create) - User can create their own settings document if the userId matches their auth.uid.
     * @allow (get, update, delete) - User can read, update, and delete their own settings document if authenticated and the userId matches their auth.uid.
     * @deny (create, update, delete) - User cannot create, update, or delete another user's settings document.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/settings/app-settings {
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isOwner(userId) && resource != null;
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description Allows a user to read, create, update, and delete their own expenses.
     * @path /users/{userId}/expenses/{expenseId}
     * @allow (create) - User can create their own expense if the userId matches their auth.uid.
     * @allow (get, update, delete) - User can read, update, and delete their own expense if authenticated and the userId matches their auth.uid.
     * @allow (list) - User can list their own expenses if authenticated and the userId matches their auth.uid.
     * @deny (create, update, delete) - User cannot create, update, or delete another user's expense.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/expenses/{expenseId} {
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if isSignedIn() && isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isOwner(userId) && resource != null;
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description Allows a user to read, create, update, and delete their own revenues.
     * @path /users/{userId}/revenues/{revenueId}
     * @allow (create) - User can create their own revenue if the userId matches their auth.uid.
     * @allow (get, update, delete) - User can read, update, and delete their own revenue if authenticated and the userId matches their auth.uid.
     * @allow (list) - User can list their own revenues if authenticated and the userId matches their auth.uid.
     * @deny (create, update, delete) - User cannot create, update, or delete another user's revenue.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/revenues/{revenueId} {
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if isSignedIn() && isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isOwner(userId) && resource != null;
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description Allows a user to read, create, update, and delete their own appointments.
     * @path /users/{userId}/appointments/{appointmentId}
     * @allow (create) - User can create their own appointment if the userId matches their auth.uid.
     * @allow (get, update, delete) - User can read, update, and delete their own appointment if authenticated and the userId matches their auth.uid.
     * @allow (list) - User can list their own appointments if authenticated and the userId matches their auth.uid.
     * @deny (create, update, delete) - User cannot create, update, or delete another user's appointment.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/appointments/{appointmentId} {
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if isSignedIn() && isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isOwner(userId) && resource != null;
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    // Helper functions
    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    function isExistingOwner(userId) {
        return isSignedIn() && isOwner(userId) && resource != null;
    }
  }
}