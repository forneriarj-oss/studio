/**
 * @fileoverview Firestore Security Rules for BizView ERP System
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model. Each user has a dedicated data tree rooted
 * at `/users/{userId}`. All data (businesses, expenses, revenues, appointments) is nested under this root,
 * ensuring that only the owning user can access it.
 *
 * Data Structure:
 * The data is organized hierarchically:
 * /users/{userId}/businesses/{businessId}
 * /users/{userId}/businesses/{businessId}/expenses/{expenseId}
 * /users/{userId}/businesses/{businessId}/revenues/{revenueId}
 * /users/{userId}/businesses/{businessId}/appointments/{appointmentId}
 *
 * Key Security Decisions:
 * - User listing is disallowed.
 * - All write operations are restricted to the owner of the respective user ID in the path.
 * - Data shape validation is relaxed to allow rapid prototyping. However, ownership checks are strictly enforced.
 * - The rules explicitly deny any operation not explicitly allowed.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the request is made by a signed-in user.
     * @return {bool} True if the user is signed in, false otherwise.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the request is made by the owner of the user ID in the path.
     * @param {string} userId The user ID to check against.
     * @return {bool} True if the user is the owner, false otherwise.
     */
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    /**
     * @description Checks if the request is made by the owner of the user ID in the path AND the document exists
     * @param {string} userId The user ID to check against.
     * @return {bool} True if the user is the owner and resource exists, false otherwise.
     */
    function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
    }

    /**
     * @description Rules for /users/{userId}/businesses/{businessId}
     * @path /users/{userId}/businesses/{businessId}
     * @allow (create) User 'user123' can create a new business with ID 'business456' under their user ID.
     * @allow (get) User 'user123' can retrieve their business with ID 'business456'.
     * @allow (update) User 'user123' can update their business with ID 'business456'.
     * @allow (delete) User 'user123' can delete their business with ID 'business456'.
     * @deny  (create) User 'user456' cannot create a business under user 'user123''s ID.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId}/businesses/{businessId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.id == businessId;
      allow update: if isExistingOwner(userId) && resource.data.id == request.resource.data.id;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Rules for /users/{userId}/businesses/{businessId}/expenses/{expenseId}
     * @path /users/{userId}/businesses/{businessId}/expenses/{expenseId}
     * @allow (create) User 'user123' can create a new expense with ID 'expense789' under their business 'business456'.
     * @allow (get) User 'user123' can retrieve their expense with ID 'expense789' from business 'business456'.
     * @allow (update) User 'user123' can update their expense with ID 'expense789' from business 'business456'.
     * @allow (delete) User 'user123' can delete their expense with ID 'expense789' from business 'business456'.
     * @deny  (create) User 'user456' cannot create an expense under user 'user123''s business.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId}/businesses/{businessId}/expenses/{expenseId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.id == expenseId && request.resource.data.businessId == businessId;
      allow update: if isExistingOwner(userId) && resource.data.id == request.resource.data.id && resource.data.businessId == request.resource.data.businessId;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Rules for /users/{userId}/businesses/{businessId}/revenues/{revenueId}
     * @path /users/{userId}/businesses/{businessId}/revenues/{revenueId}
     * @allow (create) User 'user123' can create a new revenue with ID 'revenueABC' under their business 'business456'.
     * @allow (get) User 'user123' can retrieve their revenue with ID 'revenueABC' from business 'business456'.
     * @allow (update) User 'user123' can update their revenue with ID 'revenueABC' from business 'business456'.
     * @allow (delete) User 'user123' can delete their revenue with ID 'revenueABC' from business 'business456'.
     * @deny  (create) User 'user456' cannot create a revenue under user 'user123''s business.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId}/businesses/{businessId}/revenues/{revenueId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.id == revenueId && request.resource.data.businessId == businessId;
      allow update: if isExistingOwner(userId) && resource.data.id == request.resource.data.id && resource.data.businessId == request.resource.data.businessId;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Rules for /users/{userId}/businesses/{businessId}/appointments/{appointmentId}
     * @path /users/{userId}/businesses/{businessId}/appointments/{appointmentId}
     * @allow (create) User 'user123' can create a new appointment with ID 'appointmentXYZ' under their business 'business456'.
     * @allow (get) User 'user123' can retrieve their appointment with ID 'appointmentXYZ' from business 'business456'.
     * @allow (update) User 'user123' can update their appointment with ID 'appointmentXYZ' from business 'business456'.
     * @allow (delete) User 'user123' can delete their appointment with ID 'appointmentXYZ' from business 'business456'.
     * @deny  (create) User 'user456' cannot create an appointment under user 'user123''s business.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId}/businesses/{businessId}/appointments/{appointmentId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.id == appointmentId && request.resource.data.businessId == businessId;
      allow update: if isExistingOwner(userId) && resource.data.id == request.resource.data.id && resource.data.businessId == request.resource.data.businessId;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Rules for /users/{userId}/settings/app-settings
     * @path /users/{userId}/settings/app-settings
     * @allow (get) User 'user123' can retrieve settings for their app.
     * @deny (get) User 'user456' cannot retrieve settings for user 'user123's app.
     * @principle Enforces document ownership for reads.
     */
    match /users/{userId}/settings/app-settings {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }
  }
}