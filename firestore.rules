rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the request is made by a signed-in user.
     * @principle Requires user authentication.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the authenticated user ID matches the provided user ID.
     * @param {string} userId - The user ID to compare against.
     * @principle Enforces user-based ownership.
     */
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    /**
     * @description Checks if the authenticated user ID matches the provided user ID and resource exists.
     * @param {string} userId - The user ID to compare against.
     * @principle Enforces user-based ownership and resource existence.
     */
    function isExistingOwner(userId) {
        return isOwner(userId) && existsAfter(/databases/$(database)/documents/users/$(userId));
    }

    match /users/{userId} {
      allow read, write: if false; // No access to the user document itself

      /**
       * @description Rules for business documents owned by a specific user.
       * @path /users/{userId}/businesses/{businessId}
       * @allow (create) User 'user123' can create a business with ID 'business456' under their user ID if request.auth.uid == 'user123' and request.resource.data.id == 'user123'.
       * @allow (get, list) User 'user123' can read/list business with ID 'business456' under their user ID if request.auth.uid == 'user123'.
       * @allow (update, delete) User 'user123' can update/delete business with ID 'business456' under their user ID if request.auth.uid == 'user123'.
       * @deny (create) User 'user456' cannot create a business under user ID 'user123'.
       * @deny (update) User 'user456' cannot update a business under user ID 'user123'.
       * @deny (delete) User 'user456' cannot delete a business under user ID 'user123'.
       * @principle Enforces document ownership for reads and writes.
       */
      match /businesses/{businessId} {
        allow get: if isOwner(userId);
        allow list: if isOwner(userId);
        allow create: if isOwner(userId);
        allow update: if isOwner(userId);
        allow delete: if isOwner(userId);

        /**
         * @description Rules for expense documents under a specific business owned by a specific user.
         * @path /users/{userId}/businesses/{businessId}/expenses/{expenseId}
         * @allow (create) User 'user123' can create an expense with ID 'expense789' under their business 'business456' if request.auth.uid == 'user123'.
         * @allow (get, list) User 'user123' can read/list expense with ID 'expense789' under their business 'business456' if request.auth.uid == 'user123'.
         * @allow (update, delete) User 'user123' can update/delete expense with ID 'expense789' under their business 'business456' if request.auth.uid == 'user123'.
         * @deny (create) User 'user456' cannot create an expense under business 'business456' owned by user 'user123'.
         * @deny (update) User 'user456' cannot update an expense under business 'business456' owned by user 'user123'.
         * @deny (delete) User 'user456' cannot delete an expense under business 'business456' owned by user 'user123'.
         * @principle Enforces document ownership for reads and writes.
         */
        match /expenses/{expenseId} {
          allow get: if isOwner(userId);
          allow list: if isOwner(userId);
          allow create: if isOwner(userId);
          allow update: if isOwner(userId);
          allow delete: if isOwner(userId);
        }

        /**
         * @description Rules for revenue documents under a specific business owned by a specific user.
         * @path /users/{userId}/businesses/{businessId}/revenues/{revenueId}
         * @allow (create) User 'user123' can create a revenue with ID 'revenue012' under their business 'business456' if request.auth.uid == 'user123'.
         * @allow (get, list) User 'user123' can read/list revenue with ID 'revenue012' under their business 'business456' if request.auth.uid == 'user123'.
         * @allow (update, delete) User 'user123' can update/delete revenue with ID 'revenue012' under their business 'business456' if request.auth.uid == 'user123'.
         * @deny (create) User 'user456' cannot create a revenue under business 'business456' owned by user 'user123'.
         * @deny (update) User 'user456' cannot update a revenue under business 'business456' owned by user 'user123'.
         * @deny (delete) User 'user456' cannot delete a revenue under business 'business456' owned by user 'user123'.
         * @principle Enforces document ownership for reads and writes.
         */
        match /revenues/{revenueId} {
          allow get: if isOwner(userId);
          allow list: if isOwner(userId);
          allow create: if isOwner(userId);
          allow update: if isOwner(userId);
          allow delete: if isOwner(userId);
        }

        /**
         * @description Rules for appointment documents under a specific business owned by a specific user.
         * @path /users/{userId}/businesses/{businessId}/appointments/{appointmentId}
         * @allow (create) User 'user123' can create an appointment with ID 'appointment345' under their business 'business456' if request.auth.uid == 'user123'.
         * @allow (get, list) User 'user123' can read/list appointment with ID 'appointment345' under their business 'business456' if request.auth.uid == 'user123'.
         * @allow (update, delete) User 'user123' can update/delete appointment with ID 'appointment345' under their business 'business456' if request.auth.uid == 'user123'.
         * @deny (create) User 'user456' cannot create an appointment under business 'business456' owned by user 'user123'.
         * @deny (update) User 'user456' cannot update an appointment under business 'business456' owned by user 'user123'.
         * @deny (delete) User 'user456' cannot delete an appointment under business 'business456' owned by user 'user123'.
         * @principle Enforces document ownership for reads and writes.
         */
        match /appointments/{appointmentId} {
          allow get: if isOwner(userId);
          allow list: if isOwner(userId);
          allow create: if isOwner(userId);
          allow update: if isOwner(userId);
          allow delete: if isOwner(userId);
        }
      }
    }
  }
}