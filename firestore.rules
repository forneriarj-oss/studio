/**
 * @fileoverview Firestore Security Rules for Expense Tracker App
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model. Each user has their own
 * private data tree under `/users/{userId}`. Only the authenticated user can
 * access their own data.
 *
 * Data Structure:
 * All data is nested under /users/{userId}, including user profiles, expenses, revenues, and appointments.
 *
 * Key Security Decisions:
 * - Users can only access their own data.
 * - Data validation is relaxed to allow for rapid prototyping but owner id is validated.
 * - `list` operations are allowed for owners of subcollections.
 *
 * Denormalization for Authorization:
 *  - Expenses, Revenues, and Appointments all store the `userId` of their owner. This
 *    allows rules to quickly verify ownership without additional reads.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Secures the user profile document.
     * @path /users/{userId}
     * @allow (create) - If the user's auth UID matches the userId.
     * @allow (get, update, delete) - If the user is signed in and their auth UID matches the userId.
     * @deny (create) - If the user's auth UID does not match the userId.
     * @deny (get, update, delete) - If the user is not signed in or their auth UID does not match the userId.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return isSignedIn() && request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      // Allow the user to create their own profile IF the userId matches.
      allow create: if isOwner(userId) && request.resource.data.id == userId;
      allow get: if isOwner(userId);
      allow list: if false;
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id; // Force id immutability.
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Secures expense records for a specific user.
     * @path /users/{userId}/expenses/{expenseId}
     * @allow (create) - If the user is signed in and their auth UID matches the userId in the path and in expense record.
     * @allow (get, list, update, delete) - If the user is signed in and their auth UID matches the userId in the path.
     * @deny (create, get, list, update, delete) - If the user is not signed in or their auth UID does not match the userId in the path.
     * @principle Restricts access to a user's own expenses.
     */
    match /users/{userId}/expenses/{expenseId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return isSignedIn() && request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow create: if isOwner(userId) && request.resource.data.userId == userId;
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Secures revenue records for a specific user.
     * @path /users/{userId}/revenues/{revenueId}
     * @allow (create) - If the user is signed in and their auth UID matches the userId in the path and in the revenue record.
     * @allow (get, list, update, delete) - If the user is signed in and their auth UID matches the userId in the path.
     * @deny (create, get, list, update, delete) - If the user is not signed in or their auth UID does not match the userId in the path.
     * @principle Restricts access to a user's own revenues.
     */
    match /users/{userId}/revenues/{revenueId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return isSignedIn() && request.auth.uid == userId;
      }

       function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow create: if isOwner(userId) && request.resource.data.userId == userId;
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Secures appointment records for a specific user.
     * @path /users/{userId}/appointments/{appointmentId}
     * @allow (create) - If the user is signed in and their auth UID matches the userId in the path and in the apppointment record.
     * @allow (get, list, update, delete) - If the user is signed in and their auth UID matches the userId in the path.
     * @deny (create, get, list, update, delete) - If the user is not signed in or their auth UID does not match the userId in the path.
     * @principle Restricts access to a user's own appointments.
     */
    match /users/{userId}/appointments/{appointmentId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return isSignedIn() && request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow create: if isOwner(userId) && request.resource.data.userId == userId;
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }
  }
}