rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Secure access to user profiles. Only the user can read and modify their own profile.
     * @path /users/{userId}
     * @allow (get, update, delete) if the user's UID matches the userId in the path.
     * @allow (create) if the user's UID matches the userId in the path.
     * @deny (get, list) if the user is not authenticated.
     * @deny (create, update, delete) if the user is not authenticated.
     * @deny (create, update) if the user attempts to change the userId.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isOwner(userId);
      allow delete: if isSignedIn() && isOwner(userId);
    }

    /**
     * @description Secure access to user app settings. Only the user can read and modify their own settings.
     * @path /users/{userId}/settings/app-settings
     * @allow (get, update, create) if the user's UID matches the userId in the path.
     * @deny (get, list) if the user is not authenticated.
     * @deny (create, update, delete) if the user is not authenticated.
     * @deny (create, update) if the user attempts to change the userId.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/settings/app-settings {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isOwner(userId);
      allow delete: if false;
    }

    /**
     * @description Secure access to user expenses. Only the user can create, read, update, and delete their own expenses.
     * @path /users/{userId}/expenses/{expenseId}
     * @allow (get, list, create, update, delete) if the user's UID matches the userId in the path.
     * @deny (get, list, create, update, delete) if the user is not authenticated.
     * @deny (create, update) if the user attempts to change the userId.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/expenses/{expenseId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isOwner(userId);
      allow delete: if isSignedIn() && isOwner(userId);
    }

    /**
     * @description Secure access to user revenues. Only the user can create, read, update, and delete their own revenues.
     * @path /users/{userId}/revenues/{revenueId}
     * @allow (get, list, create, update, delete) if the user's UID matches the userId in the path.
     * @deny (get, list, create, update, delete) if the user is not authenticated.
     * @deny (create, update) if the user attempts to change the userId.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/revenues/{revenueId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isOwner(userId);
      allow delete: if isSignedIn() && isOwner(userId);
    }

   /**
     * @description Secure access to user appointments. Only the user can create, read, update, and delete their own appointments.
     * @path /users/{userId}/appointments/{appointmentId}
     * @allow (get, list, create, update, delete) if the user's UID matches the userId in the path.
     * @deny (get, list, create, update, delete) if the user is not authenticated.
     * @deny (create, update) if the user attempts to change the userId.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/appointments/{appointmentId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isOwner(userId);
      allow delete: if isSignedIn() && isOwner(userId);
    }
  }
}