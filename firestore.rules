/**
 * @description This ruleset enforces a strict user-ownership model for all data. Each user can only access their own data, and no cross-user access is allowed.
 * @dataStructure Data is nested under /users/{userId}, with subcollections for settings, expenses, revenues, and appointments.
 * @keySecurityDecisions
 *   - User listing is disallowed.
 *   - All write operations are restricted to the owner of the data.
 *   - The app settings document is secured using the same ownership principle.
 * @denormalizationForAuthorization N/A - path-based authorization is sufficient.
 * @structuralSegregation User-specific data is segregated into separate subcollections under each user's document.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Secures the /users/{userId} document, allowing only the owner to read and write their own profile.
     * @path /users/{userId}
     * @allow (create) User with UID 'user123' can create their own user document.
     * @allow (get) User with UID 'user123' can read their own user document.
     * @allow (update) User with UID 'user123' can update their own user document.
     * @allow (delete) User with UID 'user123' can delete their own user document.
     * @deny (create) User with UID 'user123' cannot create a user document for 'user456'.
     * @deny (get) User with UID 'user123' cannot read the user document for 'user456'.
     * @deny (update) User with UID 'user123' cannot update the user document for 'user456'.
     * @deny (delete) User with UID 'user123' cannot delete the user document for 'user456'.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Secures the /users/{userId}/settings/app-settings document, allowing only the owner to read and write their own settings.
     * @path /users/{userId}/settings/app-settings
     * @allow (create) User with UID 'user123' can create their own settings document.
     * @allow (get) User with UID 'user123' can read their own settings document.
     * @allow (update) User with UID 'user123' can update their own settings document.
     * @allow (delete) User with UID 'user123' can delete their own settings document.
     * @deny (create) User with UID 'user123' cannot create a settings document for 'user456'.
     * @deny (get) User with UID 'user123' cannot read the settings document for 'user456'.
     * @deny (update) User with UID 'user123' cannot update the settings document for 'user456'.
     * @deny (delete) User with UID 'user123' cannot delete the settings document for 'user456'.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/settings/app-settings {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Secures the /users/{userId}/expenses/{expenseId} collection, allowing only the owner to manage their own expenses.
     * @path /users/{userId}/expenses/{expenseId}
     * @allow (create) User with UID 'user123' can create an expense record under their user ID.
     * @allow (get) User with UID 'user123' can read their own expense record.
     * @allow (list) User with UID 'user123' can list their own expense records.
     * @allow (update) User with UID 'user123' can update their own expense record.
     * @allow (delete) User with UID 'user123' can delete their own expense record.
     * @deny (create) User with UID 'user123' cannot create an expense record under 'user456'.
     * @deny (get) User with UID 'user123' cannot read an expense record owned by 'user456'.
     * @deny (update) User with UID 'user123' cannot update an expense record owned by 'user456'.
     * @deny (delete) User with UID 'user123' cannot delete an expense record owned by 'user456'.
     * @principle Enforces document ownership for writes and restricts reads to the owner.
     */
    match /users/{userId}/expenses/{expenseId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Secures the /users/{userId}/revenues/{revenueId} collection, allowing only the owner to manage their own revenues.
     * @path /users/{userId}/revenues/{revenueId}
     * @allow (create) User with UID 'user123' can create a revenue record under their user ID.
     * @allow (get) User with UID 'user123' can read their own revenue record.
     * @allow (list) User with UID 'user123' can list their own revenue records.
     * @allow (update) User with UID 'user123' can update their own revenue record.
     * @allow (delete) User with UID 'user123' can delete their own revenue record.
     * @deny (create) User with UID 'user123' cannot create a revenue record under 'user456'.
     * @deny (get) User with UID 'user123' cannot read a revenue record owned by 'user456'.
     * @deny (update) User with UID 'user123' cannot update a revenue record owned by 'user456'.
     * @deny (delete) User with UID 'user123' cannot delete a revenue record owned by 'user456'.
     * @principle Enforces document ownership for writes and restricts reads to the owner.
     */
    match /users/{userId}/revenues/{revenueId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Secures the /users/{userId}/appointments/{appointmentId} collection, allowing only the owner to manage their own appointments.
     * @path /users/{userId}/appointments/{appointmentId}
     * @allow (create) User with UID 'user123' can create an appointment record under their user ID.
     * @allow (get) User with UID 'user123' can read their own appointment record.
     * @allow (list) User with UID 'user123' can list their own appointment records.
     * @allow (update) User with UID 'user123' can update their own appointment record.
     * @allow (delete) User with UID 'user123' can delete their own appointment record.
     * @deny (create) User with UID 'user123' cannot create an appointment record under 'user456'.
     * @deny (get) User with UID 'user123' cannot read an appointment record owned by 'user456'.
     * @deny (update) User with UID 'user123' cannot update an appointment record owned by 'user456'.
     * @deny (delete) User with UID 'user123' cannot delete an appointment record owned by 'user456'.
     * @principle Enforces document ownership for writes and restricts reads to the owner.
     */
    match /users/{userId}/appointments/{appointmentId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    // Helper functions
    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }
  }
}