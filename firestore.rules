/**
 * @fileOverview
 * This ruleset enforces a strict user-ownership model for all data. Each user has a dedicated data tree under `/users/{userId}` where their profile information, expenses, revenues, and appointments are stored.
 *
 * Data Structure:
 * All data is nested under /users/{userId}, with subcollections for expenses, revenues, and appointments. This structure ensures that each user's data is isolated and accessible only to themselves.
 * /users/{userId} (User profile)
 * /users/{userId}/expenses/{expenseId} (Expense records)
 * /users/{userId}/revenues/{revenueId} (Revenue records)
 * /users/{userId}/appointments/{appointmentId} (Appointment records)
 *
 * Key Security Decisions:
 * - User data can only be accessed by the authenticated user with the matching userId.
 * - Listing of collections is only allowed by the owner of the data.
 * - All write operations are validated against the authenticated user's ID to prevent unauthorized data modification.
 *
 * Denormalization for Authorization:
 * The 'userId' field within each document (expense, revenue, appointment) is implicitly denormalized through the path structure. The security rules rely on the path to enforce ownership, rather than reading the 'userId' field within the document itself.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }

    /**
     * @description Allows access to user profile information only to the authenticated user.
     * @path /users/{userId}
     * @allow (get, create, update, delete) if the user is signed in and the userId matches the authenticated user's ID.
     * @deny (get, create, update, delete) if the user is not signed in or the userId does not match the authenticated user's ID.
     * @principle Enforces user-ownership for accessing and modifying user profile data.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Allows access to expense records only to the authenticated user.
     * @path /users/{userId}/expenses/{expenseId}
     * @allow (get, create, update, delete) if the user is signed in and the userId matches the authenticated user's ID.
     * @deny (get, create, update, delete) if the user is not signed in or the userId does not match the authenticated user's ID.
     * @principle Enforces user-ownership for accessing and modifying expense records.
     */
    match /users/{userId}/expenses/{expenseId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Allows access to revenue records only to the authenticated user.
     * @path /users/{userId}/revenues/{revenueId}
     * @allow (get, create, update, delete) if the user is signed in and the userId matches the authenticated user's ID.
     * @deny (get, create, update, delete) if the user is not signed in or the userId does not match the authenticated user's ID.
     * @principle Enforces user-ownership for accessing and modifying revenue records.
     */
    match /users/{userId}/revenues/{revenueId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Allows access to appointment records only to the authenticated user.
     * @path /users/{userId}/appointments/{appointmentId}
     * @allow (get, create, update, delete) if the user is signed in and the userId matches the authenticated user's ID.
     * @deny (get, create, update, delete) if the user is not signed in or the userId does not match the authenticated user's ID.
     * @principle Enforces user-ownership for accessing and modifying appointment records.
     */
    match /users/{userId}/appointments/{appointmentId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

     /**
     * @description Denies access to sales records for the user with id '5FJJv6raB0hDsi1cirAUcpNT3L92' since there is no schema for this.
     * @path /users/5FJJv6raB0hDsi1cirAUcpNT3L92/sales
     * @allow None
     * @deny all requests.
     * @principle Prevents unintended collection access due to missing schema definition.
     */
    match /users/{userId}/sales/{saleId} {
        allow get, list, create, update, delete: if false;
    }
  }
}