/**
 * @fileoverview Firestore Security Rules for BizView ERP System
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model, where each user controls access to their own businesses and associated data (expenses, revenues, appointments).
 *
 * Data Structure:
 * All data is nested under `/users/{userId}`, creating a clear ownership hierarchy:
 *   - `/users/{userId}/businesses/{businessId}`: Stores business data owned by the user.
 *   - `/users/{userId}/businesses/{businessId}/expenses/{expenseId}`: Stores expense records for a business.
 *   - `/users/{userId}/businesses/{businessId}/revenues/{revenueId}`: Stores revenue records for a business.
 *   - `/users/{userId}/businesses/{businessId}/appointments/{appointmentId}`: Stores appointment records for a business.
 *
 * Key Security Decisions:
 * - Path-based ownership is enforced. This means the `userId` extracted from the path must match the authenticated user's UID.
 * - All writes (create, update, delete) are restricted to the owner.
 * - Listing of resources is allowed for owners within their respective user/business scopes.
 * - Data validation is minimal, focusing on relational integrity (e.g., businessId) rather than complete schema enforcement for rapid prototyping.
 *
 * Denormalization for Authorization:
 *  - The `businessId` is duplicated within expense, revenue, and appointment documents. While seemingly redundant, this avoids the need for complex `get()` operations to verify ownership when these documents are created or modified.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Enforces ownership for businesses under a user's path.
     * @path /users/{userId}/businesses/{businessId}
     * @allow (create) User 'user123' can create a business with id 'business456' at /users/user123/businesses/business456 if request.auth.uid == 'user123'.
     * @deny (create) User 'user123' cannot create a business at /users/anotherUser/businesses/business456.
     * @allow (get, list) User 'user123' can read their business at /users/user123/businesses/business456.
     * @deny (get, list) User 'user123' cannot read another user's business.
     * @allow (update, delete) User 'user123' can update or delete their business at /users/user123/businesses/business456.
     * @deny (update, delete) User 'user123' cannot update or delete another user's business.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId}/businesses/{businessId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.id == businessId;
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Enforces ownership for expenses under a business.
     * @path /users/{userId}/businesses/{businessId}/expenses/{expenseId}
     * @allow (create) User 'user123' can create an expense for their business 'business456' at /users/user123/businesses/business456/expenses/expense789.
     * @deny (create) User 'user123' cannot create an expense for another user's business.
     * @allow (get, list) User 'user123' can read expenses for their business 'business456'.
     * @deny (get, list) User 'user123' cannot read expenses for another user's business.
     * @allow (update, delete) User 'user123' can update or delete expenses for their business 'business456'.
     * @deny (update, delete) User 'user123' cannot update or delete expenses for another user's business.
     * @principle Enforces document ownership for writes and validates relational integrity.
     */
    match /users/{userId}/businesses/{businessId}/expenses/{expenseId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.businessId == businessId;
      allow update: if isExistingOwner(userId) && request.resource.data.businessId == resource.data.businessId;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Enforces ownership for revenues under a business.
     * @path /users/{userId}/businesses/{businessId}/revenues/{revenueId}
     * @allow (create) User 'user123' can create revenue for their business 'business456' at /users/user123/businesses/business456/revenues/revenue789.
     * @deny (create) User 'user123' cannot create revenue for another user's business.
     * @allow (get, list) User 'user123' can read revenues for their business 'business456'.
     * @deny (get, list) User 'user123' cannot read revenues for another user's business.
     * @allow (update, delete) User 'user123' can update or delete revenues for their business 'business456'.
     * @deny (update, delete) User 'user123' cannot update or delete revenues for another user's business.
     * @principle Enforces document ownership for writes and validates relational integrity.
     */
    match /users/{userId}/businesses/{businessId}/revenues/{revenueId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.businessId == businessId;
      allow update: if isExistingOwner(userId) && request.resource.data.businessId == resource.data.businessId;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Enforces ownership for appointments under a business.
     * @path /users/{userId}/businesses/{businessId}/appointments/{appointmentId}
     * @allow (create) User 'user123' can create an appointment for their business 'business456' at /users/user123/businesses/business456/appointments/appointment789.
     * @deny (create) User 'user123' cannot create an appointment for another user's business.
     * @allow (get, list) User 'user123' can read appointments for their business 'business456'.
     * @deny (get, list) User 'user123' cannot read appointments for another user's business.
     * @allow (update, delete) User 'user123' can update or delete appointments for their business 'business456'.
     * @deny (update, delete) User 'user123' cannot update or delete appointments for another user's business.
     * @principle Enforces document ownership for writes and validates relational integrity.
     */
    match /users/{userId}/businesses/{businessId}/appointments/{appointmentId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.businessId == businessId;
      allow update: if isExistingOwner(userId) && request.resource.data.businessId == resource.data.businessId;
      allow delete: if isExistingOwner(userId);
    }
  }
}