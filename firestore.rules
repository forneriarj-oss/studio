/**
 * @description This ruleset enforces a strict user-ownership model for all data.
 * All data (user profiles, expenses, revenues, and appointments) is nested under the /users/{userId} path.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profile information.  Users can only read/write their own profile.
 * - /users/{userId}/expenses/{expenseId}: Stores expense records for a given user. Only the owning user can manage these.
 * - /users/{userId}/revenues/{revenueId}: Stores revenue records for a given user. Only the owning user can manage these.
 * - /users/{userId}/appointments/{appointmentId}: Stores appointment records for a given user. Only the owning user can manage these.
 *
 * Key Security Decisions:
 * - User data is strictly segregated by the 'userId' in the path.
 * - No public listing of user-owned data is allowed.  Only the owner can list their expenses, revenues, or appointments.
 * - All write operations require a valid, authenticated user.
 *
 * Denormalization for Authorization:
 *  - All data is nested under a user's path, so ownership can be checked directly against the path without needing to read document data.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profiles.
     * @path /users/{userId}
     * @allow (create) If the authenticated user's ID matches the 'userId' in the path.
     * @deny (create) If the authenticated user's ID does not match the 'userId' in the path.
     * @principle Enforces strict user ownership.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to ALL subcollections and documents 
     * nested under a specific user ID (e.g., /expenses, /revenues).
     * @path /users/{userId}/{document=**}
     * @allow (create) If the authenticated user's ID matches the 'userId' in the path.
     * @deny (create) If the authenticated user's ID does not match the 'userId' in the path.
     * @principle Enforces strict user ownership for all subcollections.
     */
    match /users/{userId}/{document=**} {
      allow read, list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    // Helper functions
    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
    }
  }
}