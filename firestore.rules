/**
 * @file Firestore Security Rules
 * @version 2
 *
 * @Core Philosophy
 * This ruleset enforces a strict user-ownership model, where each user has full control over their data, and no cross-user access is permitted.
 *
 * @Data Structure
 * All data is nested under `/users/{userId}`, creating a clear separation of data between users. This structure simplifies authorization.
 *
 * @Key Security Decisions
 * - User listing is explicitly denied.
 * - All write operations require a verified user identity (`request.auth != null`).
 * - Data validation is relaxed to allow for rapid prototyping, focusing solely on ownership and relational integrity.
 *
 * @Denormalization for Authorization
 * To avoid costly `get()` calls, ownership is enforced through path-based rules (e.g., `/users/{userId}/...`) and validated against internal document fields where applicable.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the request is made by an authenticated user.
     * @return {boolean} True if the user is signed in, false otherwise.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the authenticated user ID matches the provided user ID.
     * @param {string} userId The user ID to compare against the authenticated user ID.
     * @return {boolean} True if the user ID matches, false otherwise.
     */
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    /**
     * @description Checks if the authenticated user is the owner of the existing document.
     * @param {string} userId The user ID to compare against the authenticated user ID.
     * @return {boolean} True if the user is the owner and the document exists, false otherwise.
     */
    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }

    /**
     * @description Enforces document ownership for expenses within a user's collection.
     * @path /users/{userId}/expenses/{expenseId}
     * @allow (create) User A creates an expense record under their own user ID.
     * @deny (create) User A attempts to create an expense record under User B's user ID.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId}/expenses/{expenseId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Enforces document ownership for revenues within a user's collection.
     * @path /users/{userId}/revenues/{revenueId}
     * @allow (create) User A creates a revenue record under their own user ID.
     * @deny (create) User A attempts to create a revenue record under User B's user ID.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId}/revenues/{revenueId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Enforces document ownership for appointments within a user's collection.
     * @path /users/{userId}/appointments/{appointmentId}
     * @allow (create) User A creates an appointment record under their own user ID.
     * @deny (create) User A attempts to create an appointment record under User B's user ID.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId}/appointments/{appointmentId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

     /**
      * @description Enforces document ownership for raw materials within a user's collection.
      * @path /users/{userId}/raw-materials/{materialId}
      * @allow (create) User A creates a raw material record under their own user ID.
      * @deny (create) User A attempts to create a raw material record under User B's user ID.
      * @principle Enforces document ownership for writes.
      */
    match /users/{userId}/raw-materials/{materialId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

     /**
      * @description Enforces document ownership for finished products within a user's collection.
      * @path /users/{userId}/finished-products/{productId}
      * @allow (create) User A creates a finished product record under their own user ID.
      * @deny (create) User A attempts to create a finished product record under User B's user ID.
      * @principle Enforces document ownership for writes.
      */
    match /users/{userId}/finished-products/{productId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }
    
    /**
     * @description Enforces document ownership for sales records within a user's collection.
     * @path /users/{userId}/sales/{saleId}
     * @allow (create) User A creates a sales record under their own user ID.
     * @deny (create) User A attempts to create a sales record under User B's user ID.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId}/sales/{saleId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }
  }
}