/**
 * @description This ruleset enforces a strict user-ownership model for all data within the BizView application.
 *   Each user has a dedicated data tree rooted at `/users/{userId}`, where `{userId}` corresponds to their Firebase Authentication UID.
 *   All data (settings, expenses, revenues, appointments) is nested under this root, ensuring that only the authenticated user can access their own data.
 * @dataStructure
 *   - /users/{userId}: Stores user profile information.
 *   - /users/{userId}/settings/app-settings: Stores user-specific application settings.
 *   - /users/{userId}/expenses/{expenseId}: Stores individual expense records.
 *   - /users/{userId}/revenues/{revenueId}: Stores individual revenue records.
 *   - /users/{userId}/appointments/{appointmentId}: Stores individual appointment records.
 * @keySecurityDecisions
 *   - User listing is implicitly denied (no top-level `/users` collection).
 *   - All write operations require the user to be authenticated.
 *   - Data consistency between the path and document data is enforced on create and update.
 * @denormalizationForAuthorization N/A
 * @structuralSegregation N/A
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profile documents.
     * @path /users/{userId}
     * @allow (create) Authenticated user can create their own profile if the userId matches their auth UID.
     * @allow (get, update, delete) Authenticated user can read, update, and delete their own profile if the userId matches their auth UID.
     * @deny (create) Creation is denied if the userId does not match the auth UID.
     * @deny (get, update, delete) Read, update, and delete operations are denied for other users.
     * @principle Enforces document ownership for all operations on user profiles.
     */
    match /users/{userId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to user-specific application settings.
     * @path /users/{userId}/settings/app-settings
     * @allow (create) Authenticated user can create their own settings document if the userId matches their auth UID.
     * @allow (get, update, delete) Authenticated user can read, update, and delete their own settings if the userId matches their auth UID.
     * @deny (create) Creation is denied if the userId does not match the auth UID.
     * @deny (get, update, delete) Read, update, and delete operations are denied for other users.
     * @principle Enforces document ownership for all operations on user settings.
     */
    match /users/{userId}/settings/app-settings {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to expense records for a specific user.
     * @path /users/{userId}/expenses/{expenseId}
     * @allow (create) Authenticated user can create their own expense record if the userId matches their auth UID.
     * @allow (get, update, delete) Authenticated user can read, update, and delete their own expense record if the userId matches their auth UID.
     * @allow (list) Authenticated user can list their own expense records if the userId matches their auth UID.
     * @deny (create) Creation is denied if the userId does not match the auth UID.
     * @deny (get, update, delete) Read, update, and delete operations are denied for other users.
     * @principle Enforces document ownership for all operations on expense records.
     */
    match /users/{userId}/expenses/{expenseId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to revenue records for a specific user.
     * @path /users/{userId}/revenues/{revenueId}
     * @allow (create) Authenticated user can create their own revenue record if the userId matches their auth UID.
     * @allow (get, update, delete) Authenticated user can read, update, and delete their own revenue record if the userId matches their auth UID.
     * @allow (list) Authenticated user can list their own revenue records if the userId matches their auth UID.
     * @deny (create) Creation is denied if the userId does not match the auth UID.
     * @deny (get, update, delete) Read, update, and delete operations are denied for other users.
     * @principle Enforces document ownership for all operations on revenue records.
     */
    match /users/{userId}/revenues/{revenueId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to appointment records for a specific user.
     * @path /users/{userId}/appointments/{appointmentId}
     * @allow (create) Authenticated user can create their own appointment record if the userId matches their auth UID.
     * @allow (get, update, delete) Authenticated user can read, update, and delete their own appointment record if the userId matches their auth UID.
     * @allow (list) Authenticated user can list their own appointment records if the userId matches their auth UID.
     * @deny (create) Creation is denied if the userId does not match the auth UID.
     * @deny (get, update, delete) Read, update, and delete operations are denied for other users.
     */
    match /users/{userId}/appointments/{appointmentId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }
  }
}