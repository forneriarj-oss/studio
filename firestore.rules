rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the request is made by a signed-in user.
     * @return {boolean} True if the user is signed in, false otherwise.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the authenticated user ID matches the provided user ID.
     * @param {string} userId The user ID to compare against.
     * @return {boolean} True if the user IDs match, false otherwise.
     */
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    /**
     * @description Checks if the authenticated user is the owner of an existing document.
     * @param {string} userId The user ID to compare against.
     * @return {boolean} True if the user IDs match and the resource exists, false otherwise.
     */
    function isExistingOwner(userId) {
      return isOwner(userId) && resource.data != null;
    }
    
    /**
     * @description Rules for user profile documents.
     * @path /users/{userId}
     * @allow (create) Signed-in user creates their own profile.
     * @deny (create) Signed-in user attempts to create a profile for another user.
     * @allow (get, update, delete) Signed-in user accesses their own profile.
     * @deny (get, update, delete) Signed-in user attempts to access another user's profile.
     * @principle Enforces document ownership for writes, restricts access to a user's own data tree.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Rules for expense documents.
     * @path /users/{userId}/expenses/{expenseId}
     * @allow (create) Signed-in user creates an expense under their user ID.
     * @deny (create) Signed-in user attempts to create an expense under another user's ID.
     * @allow (get, list, update, delete) Signed-in user accesses their own expenses.
     * @deny (get, list, update, delete) Signed-in user attempts to access another user's expenses.
     * @principle Enforces document ownership for writes, restricts access to a user's own data tree.
     */
    match /users/{userId}/expenses/{expenseId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Rules for revenue documents.
     * @path /users/{userId}/revenues/{revenueId}
     * @allow (create) Signed-in user creates a revenue record under their user ID.
     * @deny (create) Signed-in user attempts to create a revenue record under another user's ID.
     * @allow (get, list, update, delete) Signed-in user accesses their own revenue records.
     * @deny (get, list, update, delete) Signed-in user attempts to access another user's revenue records.
     * @principle Enforces document ownership for writes, restricts access to a user's own data tree.
     */
    match /users/{userId}/revenues/{revenueId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Rules for appointment documents.
     * @path /users/{userId}/appointments/{appointmentId}
     * @allow (create) Signed-in user creates an appointment under their user ID.
     * @deny (create) Signed-in user attempts to create an appointment under another user's ID.
     * @allow (get, list, update, delete) Signed-in user accesses their own appointments.
     * @deny (get, list, update, delete) Signed-in user attempts to access another user's appointments.
     * @principle Enforces document ownership for writes, restricts access to a user's own data tree.
     */
    match /users/{userId}/appointments/{appointmentId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Rules for raw material documents.
     * @path /users/{userId}/raw-materials/{materialId}
     * @allow (create) Signed-in user creates a raw material under their user ID.
     * @deny (create) Signed-in user attempts to create a raw material under another user's ID.
     * @allow (get, list, update, delete) Signed-in user accesses their own raw materials.
     * @deny (get, list, update, delete) Signed-in user attempts to access another user's raw materials.
     * @principle Enforces document ownership for writes, restricts access to a user's own data tree.
     */
    match /users/{userId}/raw-materials/{materialId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Rules for finished product documents.
     * @path /users/{userId}/finished-products/{productId}
     * @allow (create) Signed-in user creates a finished product under their user ID.
     * @deny (create) Signed-in user attempts to create a finished product under another user's ID.
     * @allow (get, list, update, delete) Signed-in user accesses their own finished products.
     * @deny (get, list, update, delete) Signed-in user attempts to access another user's finished products.
     * @principle Enforces document ownership for writes, restricts access to a user's own data tree.
     */
    match /users/{userId}/finished-products/{productId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Rules for sale documents.
     * @path /users/{userId}/sales/{saleId}
     * @allow (create) Signed-in user creates a sale under their user ID.
     * @deny (create) Signed-in user attempts to create a sale under another user's ID.
     * @allow (get, list, update, delete) Signed-in user accesses their own sales.
     * @deny (get, list, update, delete) Signed-in user attempts to access another user's sales.
     * @principle Enforces document ownership for writes, restricts access to a user's own data tree.
     */
    match /users/{userId}/sales/{saleId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Rules for app settings document.
     * @path /users/{userId}/settings/app-settings
     * @allow (create) Signed-in user creates their own settings.
     * @deny (create) Signed-in user attempts to create settings for another user.
     * @allow (get, update, delete) Signed-in user accesses their own settings.
     * @deny (get, update, delete) Signed-in user attempts to access another user's settings.
     * @principle Enforces document ownership for writes, restricts access to a user's own data tree.
     */
    match /users/{userId}/settings/app-settings {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }
  }
}