rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Secures user profiles, allowing only the owner to read and write their own profile.
     * @path /users/{userId}
     * @allow (get, update, delete) User with ID 'user123' can read/write their own profile at /users/user123.
     * @allow (create) User with ID 'user123' can create their own profile at /users/user123 if they just signed up.
     * @deny (get, update, delete) User with ID 'user456' cannot read/write the profile of user 'user123' at /users/user123.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isSignedIn() {
        return request.auth != null;
      }

      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && request.auth.uid == userId;
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }

    /**
     * @description Secures business data, allowing only the owner to read and write.
     * @path /businesses/{businessId}
     * @allow (get, update, delete) User with ID 'user123' can read/write their business at /businesses/business123 if resource.data.ownerId == 'user123'.
     * @allow (create) User with ID 'user123' can create a business at /businesses/business123 if request.resource.data.ownerId == 'user123'.
     * @deny (get, update, delete) User with ID 'user456' cannot read/write the business of user 'user123' at /businesses/business123.
     * @principle Enforces document ownership for all operations.
     */
    match /businesses/{businessId} {
      function isOwner(ownerId) {
        return request.auth.uid == ownerId;
      }

      allow get: if isOwner(resource.data.ownerId);
      allow list: if false;
      allow create: if request.resource.data.ownerId == request.auth.uid;
      allow update: if isOwner(resource.data.ownerId);
      allow delete: if isOwner(resource.data.ownerId);

       /**
         * @description Secures expense records, allowing only the business owner to read and write.
         * @path /businesses/{businessId}/expenses/{expenseId}
         * @allow (get, update, delete) User with ID 'user123' can read/write an expense at /businesses/business123/expenses/expense456 if they own the business.
         * @allow (create) User with ID 'user123' can create an expense at /businesses/business123/expenses/expense456 if they own the business.
         * @deny (get, update, delete) User with ID 'user456' cannot read/write expenses for business 'business123'.
         * @principle Enforces document ownership via the business ID in the path.
         */
      match /expenses/{expenseId} {
        function isBusinessOwner(businessId) {
          return get(/databases/$(database)/documents/businesses/$(businessId)).data.ownerId == request.auth.uid;
        }

        allow get: if isBusinessOwner(businessId);
        allow list: if false;
        allow create: if isBusinessOwner(businessId);
        allow update: if isBusinessOwner(businessId);
        allow delete: if isBusinessOwner(businessId);
      }

      /**
       * @description Secures revenue records, allowing only the business owner to read and write.
       * @path /businesses/{businessId}/revenues/{revenueId}
       * @allow (get, update, delete) User with ID 'user123' can read/write revenue at /businesses/business123/revenues/revenue456 if they own the business.
       * @allow (create) User with ID 'user123' can create revenue at /businesses/business123/revenues/revenue456 if they own the business.
       * @deny (get, update, delete) User with ID 'user456' cannot read/write revenue for business 'business123'.
       * @principle Enforces document ownership via the business ID in the path.
       */
      match /revenues/{revenueId} {
        function isBusinessOwner(businessId) {
          return get(/databases/$(database)/documents/businesses/$(businessId)).data.ownerId == request.auth.uid;
        }

        allow get: if isBusinessOwner(businessId);
        allow list: if false;
        allow create: if isBusinessOwner(businessId);
        allow update: if isBusinessOwner(businessId);
        allow delete: if isBusinessOwner(businessId);
      }

      /**
       * @description Secures appointment records, allowing only the business owner to read and write.
       * @path /businesses/{businessId}/appointments/{appointmentId}
       * @allow (get, update, delete) User with ID 'user123' can read/write an appointment at /businesses/business123/appointments/appointment456 if they own the business.
       * @allow (create) User with ID 'user123' can create an appointment at /businesses/business123/appointments/appointment456 if they own the business.
       * @deny (get, update, delete) User with ID 'user456' cannot read/write appointments for business 'business123'.
       * @principle Enforces document ownership via the business ID in the path.
       */
      match /appointments/{appointmentId} {
        function isBusinessOwner(businessId) {
          return get(/databases/$(database)/documents/businesses/$(businessId)).data.ownerId == request.auth.uid;
        }

        allow get: if isBusinessOwner(businessId);
        allow list: if false;
        allow create: if isBusinessOwner(businessId);
        allow update: if isBusinessOwner(businessId);
        allow delete: if isBusinessOwner(businessId);
      }
    }
  }
}