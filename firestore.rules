/**
 * @fileoverview Firestore Security Rules.
 *
 * Core Philosophy: This ruleset enforces a strict user-ownership model. Each user can only access their own data.
 * Data Structure: All data is nested under /users/{userId}, with subcollections for expenses, revenues, and appointments.
 * Key Security Decisions:
 *  - Users can only list documents within their own user subcollections.
 *  - All write operations are restricted to the authenticated user and must be validated against the user ID in the path.
 *  - Data validation is minimal in this prototype to allow for rapid iteration.  Only fields critical for authorization are validated.
 * Denormalization for Authorization: The 'userId' field within each document is used to enforce ownership and must match the {userId} in the path.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Rule for the root of the database. Does nothing.
     * @path /
     * @allow (get, list) if false
     * @deny (create, update, delete) if false
     * @principle Placeholder for root-level operations.
     */
    match /{document=**} {
      allow read, write: if false;
    }

    /**
     * @description Manages user profile information.
     * @path /users/{userId}
     * @allow (create) An authenticated user can create their own profile.
     * @allow (get, update, delete) An authenticated user can access and modify their own profile.
     * @deny (create) If the user ID in the path does not match the authenticated user's ID.
     * @deny (get, update, delete) If the user ID in the path does not match the authenticated user's ID.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isExistingOwner(userId);
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description Manages expense records for a specific user.
     * @path /users/{userId}/expenses/{expenseId}
     * @allow (create) An authenticated user can create an expense record under their user ID.
     * @allow (get, list, update, delete) An authenticated user can access and modify their own expense records.
     * @deny (create) If the user ID in the path does not match the authenticated user's ID.
     * @deny (get, list, update, delete) If the user ID in the path does not match the authenticated user's ID.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/expenses/{expenseId} {
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if isSignedIn() && isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isSignedIn() && isExistingOwner(userId) && isOwnerIdImmutable(userId);
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description Manages revenue records for a specific user.
     * @path /users/{userId}/revenues/{revenueId}
     * @allow (create) An authenticated user can create a revenue record under their user ID.
     * @allow (get, list, update, delete) An authenticated user can access and modify their own revenue records.
     * @deny (create) If the user ID in the path does not match the authenticated user's ID.
     * @deny (get, list, update, delete) If the user ID in the path does not match the authenticated user's ID.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/revenues/{revenueId} {
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if isSignedIn() && isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isSignedIn() && isExistingOwner(userId) && isOwnerIdImmutable(userId);
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description Manages appointment records for a specific user.
     * @path /users/{userId}/appointments/{appointmentId}
     * @allow (create) An authenticated user can create an appointment record under their user ID.
     * @allow (get, list, update, delete) An authenticated user can access and modify their own appointment records.
     * @deny (create) If the user ID in the path does not match the authenticated user's ID.
     * @deny (get, list, update, delete) If the user ID in the path does not match the authenticated user's ID.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/appointments/{appointmentId} {
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if isSignedIn() && isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isSignedIn() && isExistingOwner(userId) && isOwnerIdImmutable(userId);
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }
  }

  // --- Helper functions ---
  function isSignedIn() {
    return request.auth != null;
  }

  function isOwner(userId) {
    return request.auth.uid == userId;
  }

  function isExistingOwner(userId) {
    return isOwner(userId) && resource != null;
  }

  function isOwnerIdImmutable(userId) {
    return resource.data.userId == userId;
  }
}