rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profile data.
     * @path /users/{userId}
     * @allow (get, create, update, delete, list): Authenticated user accessing their own profile.
     *          e.g., request.auth.uid == 'user123' accessing /users/user123
     * @deny (get, create, update, delete, list): Authenticated user accessing another user's profile.
     *          e.g., request.auth.uid == 'user456' accessing /users/user123
     * @principle Enforces strict document ownership for user profiles.
     */
    match /users/{userId} {
      // Only signed-in users can access user data.
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false; // User listing is not allowed.

      // Allow the user to create their own profile, but enforce that the userId matches the authenticated user's UID.
      allow create: if isSignedIn() && isOwner(userId);

      // Allow updates and deletes only if the user is the owner.
      allow update: if isSignedIn() && isOwner(userId);
      allow delete: if isSignedIn() && isOwner(userId);
    }

    /**
     * @description Controls access to business data.
     * @path /businesses/{businessId}
     * @allow (get, create, update, delete, list): Owner of the business.
     *          e.g., request.auth.uid == 'user123' accessing /businesses/business456 where resource.data.ownerId == 'user123'
     * @deny (get, create, update, delete, list): Non-owner of the business.
     *          e.g., request.auth.uid == 'user456' accessing /businesses/business456 where resource.data.ownerId == 'user123'
     * @principle Enforces document ownership for business entities.
     */
    match /businesses/{businessId} {
      allow get: if isSignedIn() && isBusinessOwner(businessId);
      allow list: if false; // Only the owner can list their businesses.

      allow create: if isSignedIn() && request.resource.data.ownerId == request.auth.uid;
      allow update: if isSignedIn() && isBusinessOwner(businessId);
      allow delete: if isSignedIn() && isBusinessOwner(businessId);
    }

    /**
     * @description Controls access to expense data associated with a business.
     * @path /businesses/{businessId}/expenses/{expenseId}
     * @allow (get, create, update, delete, list): Owner of the business to which the expense belongs.
     *          e.g., request.auth.uid == 'user123' accessing /businesses/business456/expenses/expense789 where business 'business456' has ownerId == 'user123'
     * @deny (get, create, update, delete, list): Non-owner of the business.
     *          e.g., request.auth.uid == 'user456' accessing /businesses/business456/expenses/expense789 where business 'business456' has ownerId == 'user123'
     * @principle Enforces path-based ownership for expenses.
     */
    match /businesses/{businessId}/expenses/{expenseId} {
      allow get: if isSignedIn() && isBusinessOwner(businessId);
      allow list: if false;

      allow create: if isSignedIn() && isBusinessOwner(businessId);
      allow update: if isSignedIn() && isBusinessOwner(businessId);
      allow delete: if isSignedIn() && isBusinessOwner(businessId);
    }

    /**
     * @description Controls access to revenue data associated with a business.
     * @path /businesses/{businessId}/revenues/{revenueId}
     * @allow (get, create, update, delete, list): Owner of the business to which the revenue belongs.
     *          e.g., request.auth.uid == 'user123' accessing /businesses/business456/revenues/revenue789 where business 'business456' has ownerId == 'user123'
     * @deny (get, create, update, delete, list): Non-owner of the business.
     *          e.g., request.auth.uid == 'user456' accessing /businesses/business456/revenues/revenue789 where business 'business456' has ownerId == 'user123'
     * @principle Enforces path-based ownership for revenues.
     */
    match /businesses/{businessId}/revenues/{revenueId} {
      allow get: if isSignedIn() && isBusinessOwner(businessId);
      allow list: if false;

      allow create: if isSignedIn() && isBusinessOwner(businessId);
      allow update: if isSignedIn() && isBusinessOwner(businessId);
      allow delete: if isSignedIn() && isBusinessOwner(businessId);
    }

    /**
     * @description Controls access to appointment data associated with a business.
     * @path /businesses/{businessId}/appointments/{appointmentId}
     * @allow (get, create, update, delete, list): Owner of the business to which the appointment belongs.
     *          e.g., request.auth.uid == 'user123' accessing /businesses/business456/appointments/appointment789 where business 'business456' has ownerId == 'user123'
     * @deny (get, create, update, delete, list): Non-owner of the business.
     *          e.g., request.auth.uid == 'user456' accessing /businesses/business456/appointments/appointment789 where business 'business456' has ownerId == 'user123'
     * @principle Enforces path-based ownership for appointments.
     */
    match /businesses/{businessId}/appointments/{appointmentId} {
      allow get: if isSignedIn() && isBusinessOwner(businessId);
      allow list: if false;

      allow create: if isSignedIn() && isBusinessOwner(businessId);
      allow update: if isSignedIn() && isBusinessOwner(businessId);
      allow delete: if isSignedIn() && isBusinessOwner(businessId);
    }
  }

  // Helper functions

  // Checks if the user is signed in.
  function isSignedIn() {
    return request.auth != null;
  }

  // Checks if the authenticated user is the owner of the user profile.
  function isOwner(userId) {
    return request.auth.uid == userId;
  }

  // Checks if the authenticated user is the owner of the business based on the businessId.
  function isBusinessOwner(businessId) {
    return get(/databases/$(database)/documents/businesses/$(businessId)).data.ownerId == request.auth.uid;
  }
}