/**
 * @file Firestore Security Rules
 * @description This ruleset enforces a strict user-ownership model, ensuring that users can only access their own data.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profile information. The userId must match the authenticated user's UID.
 * - /users/{userId}/settings/app-settings: Stores application settings for a specific user.
 * - /users/{userId}/expenses/{expenseId}: Stores expense records for a specific user.
 * - /users/{userId}/revenues/{revenueId}: Stores revenue records for a specific user.
 * - /users/{userId}/appointments/{appointmentId}: Stores appointment records for a specific user.
 *
 * Key Security Decisions:
 * - User listing is disallowed.
 * - All data is nested under /users/{userId}, enforcing clear ownership.
 * - The rules strictly validate that the authenticated user's UID matches the userId path segment.
 *
 * Error Resolution:
 * - The rules explicitly grant the user identified by {userId} permission to read their settings at `/users/{userId}/settings/app-settings`, resolving the original reported error.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the request is authenticated.
     * @returns {boolean} True if the request is authenticated, false otherwise.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the authenticated user's UID matches the provided userId.
     * @param {string} userId The user ID to compare against.
     * @returns {boolean} True if the authenticated user is the owner, false otherwise.
     */
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    /**
     * @description Checks if the authenticated user is the owner and the resource exists.
     *              Useful for update and delete operations.
     * @param {string} userId The user ID to compare against.
     * @returns {boolean} True if the authenticated user is the owner and the resource exists, false otherwise.
     */
    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }

    /**
     * @description Rules for user profiles.
     * @path /users/{userId}
     * @allow (create) User 'user123' can create their profile if authenticated as 'user123'.
     * @deny (create) User 'user456' cannot create a profile for 'user123'.
     * @allow (get) User 'user123' can read their own profile.
     * @deny (get) User 'user456' cannot read the profile of 'user123'.
     * @allow (update) User 'user123' can update their own profile.
     * @deny (update) User 'user456' cannot update the profile of 'user123'.
     * @allow (delete) User 'user123' can delete their own profile.
     * @deny (delete) User 'user456' cannot delete the profile of 'user123'.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId) && request.resource.data.id == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(userId);
    }

     /**
      * @description Rules for user settings.
      * @path /users/{userId}/settings/app-settings
      * @allow (create) User 'user123' can create their settings if authenticated as 'user123'.
      * @deny (create) User 'user456' cannot create settings for 'user123'.
      * @allow (get) User 'user123' can read their own settings.
      * @deny (get) User 'user456' cannot read the settings of 'user123'.
      * @allow (update) User 'user123' can update their own settings.
      * @deny (update) User 'user456' cannot update the settings of 'user123'.
      * @allow (delete) User 'user123' can delete their own settings.
      * @deny (delete) User 'user456' cannot delete the settings of 'user123'.
      * @principle Restricts access to a user's own settings.
      */
    match /users/{userId}/settings/app-settings {
        allow get: if isOwner(userId);
        allow list: if false;
        allow create: if isOwner(userId);
        allow update: if isExistingOwner(userId);
        allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Rules for user expenses.
     * @path /users/{userId}/expenses/{expenseId}
     * @allow (create) User 'user123' can create an expense if authenticated as 'user123'.
     * @deny (create) User 'user456' cannot create an expense for 'user123'.
     * @allow (get) User 'user123' can read their own expense.
     * @deny (get) User 'user456' cannot read the expense of 'user123'.
     * @allow (update) User 'user123' can update their own expense.
     * @deny (update) User 'user456' cannot update the expense of 'user123'.
     * @allow (delete) User 'user123' can delete their own expense.
     * @deny (delete) User 'user456' cannot delete the expense of 'user123'.
     * @principle Restricts access to a user's own expenses.
     */
    match /users/{userId}/expenses/{expenseId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.userId == resource.data.userId;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Rules for user revenues.
     * @path /users/{userId}/revenues/{revenueId}
     * @allow (create) User 'user123' can create a revenue record if authenticated as 'user123'.
     * @deny (create) User 'user456' cannot create a revenue record for 'user123'.
     * @allow (get) User 'user123' can read their own revenue record.
     * @deny (get) User 'user456' cannot read the revenue record of 'user123'.
     * @allow (update) User 'user123' can update their own revenue record.
     * @deny (update) User 'user456' cannot update the revenue record of 'user123'.
     * @allow (delete) User 'user123' can delete their own revenue record.
     * @deny (delete) User 'user456' cannot delete the revenue record of 'user123'.
     * @principle Restricts access to a user's own revenues.
     */
    match /users/{userId}/revenues/{revenueId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.userId == resource.data.userId;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Rules for user appointments.
     * @path /users/{userId}/appointments/{appointmentId}
     * @allow (create) User 'user123' can create an appointment if authenticated as 'user123'.
     * @deny (create) User 'user456' cannot create an appointment for 'user123'.
     * @allow (get) User 'user123' can read their own appointment.
     * @deny (get) User 'user456' cannot read the appointment of 'user123'.
     * @allow (update) User 'user123' can update their own appointment.
     * @deny (update) User 'user456' cannot update the appointment of 'user123'.
     * @allow (delete) User 'user123' can delete their own appointment.
     * @deny (delete) User 'user456' cannot delete the appointment of 'user123'.
     * @principle Restricts access to a user's own appointments.
     */
    match /users/{userId}/appointments/{appointmentId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.userId == resource.data.userId;
      allow delete: if isExistingOwner(userId);
    }
  }
}