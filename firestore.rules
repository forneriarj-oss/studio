/**
 * @fileoverview Firestore Security Rules for the application.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model. Each user has full control over their own data,
 * and no user can access another user's data. This is achieved through path-based authorization.
 *
 * Data Structure:
 * All data is nested under /users/{userId}. User profiles are stored directly under this path,
 * while expenses, revenues, and appointments are stored in subcollections.
 *
 * Key Security Decisions:
 * - User listing is implicitly disallowed.
 * - All write operations are strictly controlled by ownership.
 * - Data validation is relaxed in this prototype phase, focusing only on ownership and relational integrity.
 *
 * Denormalization for Authorization:
 * The `userId` is denormalized into each Expense, Revenue, and Appointment document.
 * This enables direct authorization checks within the rules without requiring additional reads.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to check if the user is signed in
    function isSignedIn() {
      return request.auth != null;
    }

    // Helper function to check if the user is the owner of the resource
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    // Helper function to check if the user is the owner of the resource, and the resource exists
    function isExistingOwner(userId) {
      return isOwner(userId) && existsAfter(/databases/$(database)/documents/users/$(userId));
    }

    /**
     * @description Grants access to user profile information only to the authenticated user.
     * @path /users/{userId}
     * @allow (create) - User 'test_user' with id 'test_user' can create their own profile.
     * @allow (get, update, delete) - User 'test_user' with id 'test_user' can read, update, or delete their own profile.
     * @deny (create, get, update, delete) - User 'other_user' cannot create, read, update, or delete the 'test_user' profile.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false; // Listing all users is not permitted

      // Self-creation: Only allow create if the authenticated user's UID matches the userId
      allow create: if isOwner(userId);

      // On Update: Enforce that the id field is immutable and matches the path
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Grants access to expense records only to the authenticated user who owns them.
     * @path /users/{userId}/expenses/{expenseId}
     * @allow (create) - User 'test_user' with id 'test_user' can create an expense record under their profile.
     * @allow (get, list, update, delete) - User 'test_user' can read, list, update, or delete their own expense records.
     * @deny (create, get, list, update, delete) - User 'other_user' cannot create, read, list, update, or delete expense records under 'test_user' profile.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/expenses/{expenseId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Grants access to revenue records only to the authenticated user who owns them.
     * @path /users/{userId}/revenues/{revenueId}
     * @allow (create) - User 'test_user' with id 'test_user' can create a revenue record under their profile.
     * @allow (get, list, update, delete) - User 'test_user' can read, list, update, or delete their own revenue records.
     * @deny (create, get, list, update, delete) - User 'other_user' cannot create, read, list, update, or delete revenue records under 'test_user' profile.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/revenues/{revenueId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Grants access to appointment records only to the authenticated user who owns them.
     * @path /users/{userId}/appointments/{appointmentId}
     * @allow (create) - User 'test_user' with id 'test_user' can create an appointment record under their profile.
     * @allow (get, list, update, delete) - User 'test_user' can read, list, update, or delete their own appointment records.
     * @deny (create, get, list, update, delete) - User 'other_user' cannot create, read, list, update, or delete appointment records under 'test_user' profile.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/appointments/{appointmentId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }
  }
}