/**
 * @file Firebase Security Rules for Firestore.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model, where each user has exclusive access to their own data,
 * including profile information, expenses, revenues, and appointments.
 *
 * Data Structure:
 * All user-specific data is nested under the `/users/{userId}` path.
 *  - User profiles are stored directly at `/users/{userId}`.
 *  - Expenses are stored in a subcollection at `/users/{userId}/expenses/{expenseId}`.
 *  - Revenues are stored in a subcollection at `/users/{userId}/revenues/{revenueId}`.
 *  - Appointments are stored in a subcollection at `/users/{userId}/appointments/{appointmentId}`.
 *
 * Key Security Decisions:
 * - Users can only access their own data.
 * - Listing all users is disallowed to protect user privacy.
 * - Data consistency between the path and document data is enforced on create and update.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Enforces read and write access only to the authenticated user's profile.
     * @path /users/{userId}
     * @allow (get) User with ID 'user123' can read their own profile.
     * @allow (create) User with ID 'user123' can create their own profile.
     * @allow (update) User with ID 'user123' can update their own profile.
     * @allow (delete) User with ID 'user123' can delete their own profile.
     * @deny (get) User with ID 'user456' cannot read the profile of user 'user123'.
     * @deny (create) User with ID 'user456' cannot create a profile for user 'user123'.
     * @deny (update) User with ID 'user456' cannot update the profile of user 'user123'.
     * @deny (delete) User with ID 'user456' cannot delete the profile of user 'user123'.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }

      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId) && request.resource.data.id == userId;
      allow update: if isOwner(userId) && resource.data.id == request.resource.data.id;
      allow delete: if isOwner(userId) && resource != null;
    }

    /**
     * @description Enforces read and write access only to the authenticated user's expenses.
     * @path /users/{userId}/expenses/{expenseId}
     * @allow (get) User with ID 'user123' can read their own expense with ID 'expense456'.
     * @allow (create) User with ID 'user123' can create a new expense with ID 'expense456'.
     * @allow (update) User with ID 'user123' can update their own expense with ID 'expense456'.
     * @allow (delete) User with ID 'user123' can delete their own expense with ID 'expense456'.
     * @deny (get) User with ID 'user456' cannot read the expense of user 'user123'.
     * @deny (create) User with ID 'user456' cannot create an expense for user 'user123'.
     * @deny (update) User with ID 'user456' cannot update the expense of user 'user123'.
     * @deny (delete) User with ID 'user456' cannot delete the expense of user 'user123'.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId}/expenses/{expenseId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }

      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isOwner(userId) && resource.data.userId == request.resource.data.userId && resource != null;
      allow delete: if isOwner(userId) && resource != null;
    }

    /**
     * @description Enforces read and write access only to the authenticated user's revenues.
     * @path /users/{userId}/revenues/{revenueId}
     * @allow (get) User with ID 'user123' can read their own revenue with ID 'revenue456'.
     * @allow (create) User with ID 'user123' can create a new revenue with ID 'revenue456'.
     * @allow (update) User with ID 'user123' can update their own revenue with ID 'revenue456'.
     * @allow (delete) User with ID 'user123' can delete their own revenue with ID 'revenue456'.
     * @deny (get) User with ID 'user456' cannot read the revenue of user 'user123'.
     * @deny (create) User with ID 'user456' cannot create a revenue for user 'user123'.
     * @deny (update) User with ID 'user456' cannot update the revenue of user 'user123'.
     * @deny (delete) User with ID 'user456' cannot delete the revenue of user 'user123'.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId}/revenues/{revenueId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }

      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isOwner(userId) && resource.data.userId == request.resource.data.userId && resource != null;
      allow delete: if isOwner(userId) && resource != null;
    }

    /**
     * @description Enforces read and write access only to the authenticated user's appointments.
     * @path /users/{userId}/appointments/{appointmentId}
     * @allow (get) User with ID 'user123' can read their own appointment with ID 'appointment456'.
     * @allow (create) User with ID 'user123' can create a new appointment with ID 'appointment456'.
     * @allow (update) User with ID 'user123' can update their own appointment with ID 'appointment456'.
     * @allow (delete) User with ID 'user123' can delete their own appointment with ID 'appointment456'.
     * @deny (get) User with ID 'user456' cannot read the appointment of user 'user123'.
     * @deny (create) User with ID 'user456' cannot create an appointment for user 'user123'.
     * @deny (update) User with ID 'user456' cannot update the appointment of user 'user123'.
     * @deny (delete) User with ID 'user456' cannot delete the appointment of user 'user123'.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId}/appointments/{appointmentId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }

      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isOwner(userId) && resource.data.userId == request.resource.data.userId && resource != null;
      allow delete: if isOwner(userId) && resource != null;
    }
  }
}