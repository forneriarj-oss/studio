/**
 * @description This ruleset enforces a strict user-ownership model for all data. Each user can only access their own profile and associated data (expenses, revenues, appointments).
 * @dataStructure
 *   - /users/{userId}: Stores user profiles, accessible only by the user themselves.
 *   - /users/{userId}/expenses/{expenseId}: Stores expenses for a specific user, accessible only by that user.
 *   - /users/{userId}/revenues/{revenueId}: Stores revenues for a specific user, accessible only by that user.
 *   - /users/{userId}/appointments/{appointmentId}: Stores appointments for a specific user, accessible only by that user.
 * @keySecurityDecisions
 *   - User listing is disallowed.
 *   - All data is private and requires authentication.
 *   - Relational integrity is enforced on create and update operations to ensure data consistency within the user's data tree.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to check if the request is authenticated.
    function isSignedIn() {
      return request.auth != null;
    }

    // Helper function to check if the authenticated user is the owner of the resource.
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    // Helper function to check if the authenticated user is the existing owner of the resource.
    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }

    /**
     * @description Manages access to user profiles. Only the authenticated user can read and write their own profile.
     * @path /users/{userId}
     * @allow (create) - User A with ID 'user_abc' can create a document at /users/user_abc if authenticated as 'user_abc'.
     * @allow (get) - User A with ID 'user_abc' can read the document at /users/user_abc if authenticated as 'user_abc'.
     * @allow (update) - User A with ID 'user_abc' can update the document at /users/user_abc if authenticated as 'user_abc'.
     * @allow (delete) - User A with ID 'user_abc' can delete the document at /users/user_abc if authenticated as 'user_abc'.
     * @deny (create) - User B with ID 'user_xyz' cannot create a document at /users/user_abc, even if authenticated.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId) && request.resource.data.id == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Manages access to user-owned expenses. Only the authenticated user can read and write their own expenses.
     * @path /users/{userId}/expenses/{expenseId}
     * @allow (create) - User A with ID 'user_abc' can create a document at /users/user_abc/expenses/expense_1 if authenticated as 'user_abc'.
     * @allow (get) - User A with ID 'user_abc' can read the document at /users/user_abc/expenses/expense_1 if authenticated as 'user_abc'.
     * @allow (update) - User A with ID 'user_abc' can update the document at /users/user_abc/expenses/expense_1 if authenticated as 'user_abc'.
     * @allow (delete) - User A with ID 'user_abc' can delete the document at /users/user_abc/expenses/expense_1 if authenticated as 'user_abc'.
     * @deny (create) - User B with ID 'user_xyz' cannot create a document at /users/user_abc/expenses/expense_1, even if authenticated.
     * @principle Enforces document ownership for all operations within the user's data tree.
     */
    match /users/{userId}/expenses/{expenseId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.userId == userId;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Manages access to user-owned revenues. Only the authenticated user can read and write their own revenues.
     * @path /users/{userId}/revenues/{revenueId}
     * @allow (create) - User A with ID 'user_abc' can create a document at /users/user_abc/revenues/revenue_1 if authenticated as 'user_abc'.
     * @allow (get) - User A with ID 'user_abc' can read the document at /users/user_abc/revenues/revenue_1 if authenticated as 'user_abc'.
     * @allow (update) - User A with ID 'user_abc' can update the document at /users/user_abc/revenues/revenue_1 if authenticated as 'user_abc'.
     * @allow (delete) - User A with ID 'user_abc' can delete the document at /users/user_abc/revenues/revenue_1 if authenticated as 'user_abc'.
     * @deny (create) - User B with ID 'user_xyz' cannot create a document at /users/user_abc/revenues/revenue_1, even if authenticated.
     * @principle Enforces document ownership for all operations within the user's data tree.
     */
    match /users/{userId}/revenues/{revenueId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.userId == userId;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Manages access to user-owned appointments. Only the authenticated user can read and write their own appointments.
     * @path /users/{userId}/appointments/{appointmentId}
     * @allow (create) - User A with ID 'user_abc' can create a document at /users/user_abc/appointments/appointment_1 if authenticated as 'user_abc'.
     * @allow (get) - User A with ID 'user_abc' can read the document at /users/user_abc/appointments/appointment_1 if authenticated as 'user_abc'.
     * @allow (update) - User A with ID 'user_abc' can update the document at /users/user_abc/appointments/appointment_1 if authenticated as 'user_abc'.
     * @allow (delete) - User A with ID 'user_abc' can delete the document at /users/user_abc/appointments/appointment_1 if authenticated as 'user_abc'.
     * @deny (create) - User B with ID 'user_xyz' cannot create a document at /users/user_abc/appointments/appointment_1, even if authenticated.
     * @principle Enforces document ownership for all operations within the user's data tree.
     */
    match /users/{userId}/appointments/{appointmentId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.userId == userId;
      allow delete: if isExistingOwner(userId);
    }
  }
}