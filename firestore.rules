/**
 * @fileoverview Firestore Security Rules for the application.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model. Users can only access their own data.
 *
 * Data Structure:
 * All data is nested under /users/{userId}, with subcollections for expenses, revenues, and appointments.
 *
 * Key Security Decisions:
 * - Users can only create, read, update, and delete their own documents and data within their user-specific data tree.
 * - Listing other users is disallowed.
 * - Data shapes are not strictly enforced, focusing on authorization.
 *
 * Denormalization for Authorization:
 * The 'userId' field is present in all documents under /users/{userId} to simplify authorization checks. This avoids the need for costly and complex 'get()' calls.
 *
 * Structural Segregation:
 * User-specific data (expenses, revenues, appointments) is stored in separate subcollections to maintain a clear access control boundary.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows a user to manage their own profile data.
     * @path /users/{userId}
     * @allow (create) - User with UID 'user_abc' can create their own user document if request.auth.uid == 'user_abc'.
     * @allow (get, update, delete) - User with UID 'user_abc' can read, update, and delete their own user document.
     * @deny (create) - User with UID 'user_xyz' cannot create a user document with ID 'user_abc'.
     * @deny (get, update, delete) - User with UID 'user_xyz' cannot read, update, or delete the user document with ID 'user_abc'.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId) && request.resource.data.id == userId;
      allow update: if isOwner(userId) && resource.data.id == userId;
      allow delete: if isOwner(userId) && resource.data.id == userId;
    }

    /**
     * @description Allows a user to manage their own expenses.
     * @path /users/{userId}/expenses/{expenseId}
     * @allow (create) - User with UID 'user_abc' can create an expense in their own user document.
     * @allow (get, list, update, delete) - User with UID 'user_abc' can read, list, update, and delete expenses in their own user document.
     * @deny (create) - User with UID 'user_xyz' cannot create an expense in user 'user_abc' document.
     * @deny (get, list, update, delete) - User with UID 'user_xyz' cannot read, list, update, or delete expenses in user 'user_abc' document.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/expenses/{expenseId} {
      function isOwner(userId) {
        return request.auth.uid == userId;
      }
      
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isOwner(userId) && resource.data.userId == userId;
      allow delete: if isOwner(userId) && resource.data.userId == userId;
    }

    /**
     * @description Allows a user to manage their own revenues.
     * @path /users/{userId}/revenues/{revenueId}
     * @allow (create) - User with UID 'user_abc' can create a revenue in their own user document.
     * @allow (get, list, update, delete) - User with UID 'user_abc' can read, list, update, and delete revenues in their own user document.
     * @deny (create) - User with UID 'user_xyz' cannot create a revenue in user 'user_abc' document.
     * @deny (get, list, update, delete) - User with UID 'user_xyz' cannot read, list, update, or delete revenues in user 'user_abc' document.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/revenues/{revenueId} {
      function isOwner(userId) {
        return request.auth.uid == userId;
      }
      
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isOwner(userId) && resource.data.userId == userId;
      allow delete: if isOwner(userId) && resource.data.userId == userId;
    }

    /**
     * @description Allows a user to manage their own appointments.
     * @path /users/{userId}/appointments/{appointmentId}
     * @allow (create) - User with UID 'user_abc' can create an appointment in their own user document.
     * @allow (get, list, update, delete) - User with UID 'user_abc' can read, list, update, and delete appointments in their own user document.
     * @deny (create) - User with UID 'user_xyz' cannot create an appointment in user 'user_abc' document.
     * @deny (get, list, update, delete) - User with UID 'user_xyz' cannot read, list, update, or delete appointments in user 'user_abc' document.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/appointments/{appointmentId} {
      function isOwner(userId) {
        return request.auth.uid == userId;
      }
      
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isOwner(userId) && resource.data.userId == userId;
      allow delete: if isOwner(userId) && resource.data.userId == userId;
    }
  }
}