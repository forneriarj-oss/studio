{
  "entities": {
    "Expense": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Expense",
      "type": "object",
      "description": "Represents an expense record.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the expense record."
        },
        "date": {
          "type": "string",
          "description": "The date the expense was incurred.",
          "format": "date-time"
        },
        "amount": {
          "type": "number",
          "description": "The amount of the expense."
        },
        "category": {
          "type": "string",
          "description": "The category of the expense (e.g., 'Rent', 'Supplies')."
        },
        "description": {
          "type": "string",
          "description": "A description of the expense."
        }
      },
      "required": [
        "id",
        "date",
        "amount",
        "category",
        "description"
      ]
    },
    "Revenue": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Revenue",
      "type": "object",
      "description": "Represents a revenue record.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the revenue record."
        },
        "date": {
          "type": "string",
          "description": "The date the revenue was received.",
          "format": "date-time"
        },
        "amount": {
          "type": "number",
          "description": "The amount of the revenue."
        },
        "source": {
          "type": "string",
          "description": "The source of the revenue (e.g., 'Sales', 'Services')."
        },
        "description": {
          "type": "string",
          "description": "A description of the revenue."
        }
      },
      "required": [
        "id",
        "date",
        "amount",
        "source",
        "description"
      ]
    },
    "Appointment": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Appointment",
      "type": "object",
      "description": "Represents a scheduled appointment.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the appointment."
        },
        "startTime": {
          "type": "string",
          "description": "The start time of the appointment.",
          "format": "date-time"
        },
        "endTime": {
          "type": "string",
          "description": "The end time of the appointment.",
          "format": "date-time"
        },
        "title": {
          "type": "string",
          "description": "The title of the appointment."
        },
        "description": {
          "type": "string",
          "description": "A description of the appointment."
        }
      },
      "required": [
        "id",
        "startTime",
        "endTime",
        "title",
        "description"
      ]
    }
  },
  "auth": {
    "providers": [
      "password",
      "anonymous"
    ]
  },
  "firestore": {
    "structure": [
      {
        "path": "/users/{userId}",
        "definition": {
          "entityName": "user",
          "schema": {
            "$ref": "#/backend/entities/User"
          },
          "description": "Root collection for user data. All user-specific data is stored under this document.",
          "params": [
            {
              "name": "userId",
              "description": "The unique identifier for the user."
            }
          ]
        }
      },
      {
        "path": "/users/{userId}/expenses/{expenseId}",
        "definition": {
          "entityName": "Expense",
          "schema": {
            "$ref": "#/backend/entities/Expense"
          },
          "description": "Stores expense records for a specific user.",
          "params": [
            {
              "name": "userId",
              "description": "The unique identifier for the user."
            },
            {
              "name": "expenseId",
              "description": "The unique identifier for the expense record."
            }
          ]
        }
      },
      {
        "path": "/users/{userId}/revenue/{revenueId}",
        "definition": {
          "entityName": "Revenue",
          "schema": {
            "$ref": "#/backend/entities/Revenue"
          },
          "description": "Stores revenue records for a specific user.",
          "params": [
            {
              "name": "userId",
              "description": "The unique identifier for the user."
            },
            {
              "name": "revenueId",
              "description": "The unique identifier for the revenue record."
            }
          ]
        }
      },
      {
        "path": "/users/{userId}/appointments/{appointmentId}",
        "definition": {
          "entityName": "Appointment",
          "schema": {
            "$ref": "#/backend/entities/Appointment"
          },
          "description": "Stores appointment records for a specific user.",
          "params": [
            {
              "name": "userId",
              "description": "The unique identifier for the user."
            },
            {
              "name": "appointmentId",
              "description": "The unique identifier for the appointment record."
            }
          ]
        }
      }
    ],
    "reasoning": "The Firestore structure is designed to provide a secure and scalable foundation for the BizView application, adhering to the principles of Authorization Independence, Structural Segregation, and Access Modeling. Each user owns their data, which is stored under their user ID, promoting clear ownership and simplified security rules.\n\n**Authorization Independence:**\n\n*   All access control is path-based, eliminating the need for `get()` calls in security rules. Each entity is stored under the user's document.\n\n**Structural Segregation:**\n\n*   The structure isolates user-specific data, ensuring consistent security posture.\n\n**Access Modeling:**\n\n*   Path-Based Ownership: Uses `/users/{userId}` as the root for user-specific data. All other entities (Expenses, Revenue, Appointments) are stored as subcollections. This ensures that only the user can access their data.\n\n**QAPs Support:**\n\n*   The path-based ownership model facilitates secure `list` operations. Rules can easily check if `request.auth.uid` matches the `{userId}` parameter to allow listing of resources.\n\nThe design prioritizes clarity, predictability, and maintainability, making it easy to reason about security and data access."
  }
}