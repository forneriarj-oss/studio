{
  "entities": {
    "Expense": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Expense",
      "type": "object",
      "description": "Represents an expense record.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the expense."
        },
        "date": {
          "type": "string",
          "description": "Date of the expense.",
          "format": "date-time"
        },
        "amount": {
          "type": "number",
          "description": "Amount of the expense."
        },
        "category": {
          "type": "string",
          "description": "Category of the expense (e.g., 'Rent', 'Supplies')."
        },
        "description": {
          "type": "string",
          "description": "Description of the expense."
        }
      },
      "required": [
        "id",
        "date",
        "amount",
        "category"
      ]
    },
    "Revenue": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Revenue",
      "type": "object",
      "description": "Represents a revenue record.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the revenue."
        },
        "date": {
          "type": "string",
          "description": "Date of the revenue.",
          "format": "date-time"
        },
        "amount": {
          "type": "number",
          "description": "Amount of the revenue."
        },
        "source": {
          "type": "string",
          "description": "Source of the revenue (e.g., 'Sales', 'Services')."
        },
        "description": {
          "type": "string",
          "description": "Description of the revenue."
        }
      },
      "required": [
        "id",
        "date",
        "amount",
        "source"
      ]
    },
    "Appointment": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Appointment",
      "type": "object",
      "description": "Represents a scheduled appointment.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the appointment."
        },
        "startTime": {
          "type": "string",
          "description": "Start time of the appointment.",
          "format": "date-time"
        },
        "endTime": {
          "type": "string",
          "description": "End time of the appointment.",
          "format": "date-time"
        },
        "description": {
          "type": "string",
          "description": "Description of the appointment."
        },
        "notes": {
          "type": "string",
          "description": "Additional notes for the appointment, potentially AI-generated."
        }
      },
      "required": [
        "id",
        "startTime",
        "endTime",
        "description"
      ]
    }
  },
  "auth": {
    "providers": [
      "password",
      "anonymous"
    ]
  },
  "firestore": {
    "structure": [
      {
        "path": "/users/{userId}/expenses/{expenseId}",
        "definition": {
          "entityName": "Expense",
          "schema": {
            "$ref": "#/backend/entities/Expense"
          },
          "description": "Stores expense records for a specific user. Path-based ownership ensures only the user can access their expenses.",
          "params": [
            {
              "name": "userId",
              "description": "The unique identifier of the user."
            },
            {
              "name": "expenseId",
              "description": "The unique identifier of the expense."
            }
          ]
        }
      },
      {
        "path": "/users/{userId}/revenues/{revenueId}",
        "definition": {
          "entityName": "Revenue",
          "schema": {
            "$ref": "#/backend/entities/Revenue"
          },
          "description": "Stores revenue records for a specific user. Path-based ownership ensures only the user can access their revenue.",
          "params": [
            {
              "name": "userId",
              "description": "The unique identifier of the user."
            },
            {
              "name": "revenueId",
              "description": "The unique identifier of the revenue."
            }
          ]
        }
      },
      {
        "path": "/users/{userId}/appointments/{appointmentId}",
        "definition": {
          "entityName": "Appointment",
          "schema": {
            "$ref": "#/backend/entities/Appointment"
          },
          "description": "Stores appointment records for a specific user. Path-based ownership ensures only the user can access their appointments.",
          "params": [
            {
              "name": "userId",
              "description": "The unique identifier of the user."
            },
            {
              "name": "appointmentId",
              "description": "The unique identifier of the appointment."
            }
          ]
        }
      }
    ],
    "reasoning": "The Firestore structure is designed to support a basic ERP system for small businesses, focusing on revenue, expenses, appointments, and profit calculation. It prioritizes Authorization Independence and QAPs by denormalizing ownership and access control data where necessary. The structure uses path-based ownership for user-specific data (expenses, revenue, appointments) and avoids hierarchical authorization dependencies by ensuring each document contains all necessary authorization information. This design allows for efficient and secure list operations and simplifies security rules.\n\nSpecifically, all data related to a user is namespaced under `/users/{userId}`. This provides a clear ownership model and allows for simple security rules that ensure only the authenticated user can access their own data. This structure facilitates secure 'list' operations by ensuring that the rules can be applied at the collection level without needing to filter based on document content. This structure enables performing list operations securely without exposing data from other users or relying on content-based filtering, which is strongly discouraged in Firestore rules."
  }
}