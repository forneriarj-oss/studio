{
  "entities": {
    "User": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "User",
      "type": "object",
      "description": "Represents a user of the BizView application.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the User entity."
        },
        "name": {
          "type": "string",
          "description": "The user's full name."
        },
        "email": {
          "type": "string",
          "description": "The user's email address.",
          "format": "email"
        }
      },
      "required": [
        "id",
        "name",
        "email"
      ]
    },
    "Expense": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Expense",
      "type": "object",
      "description": "Represents an expense recorded in the BizView application.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the Expense entity."
        },
        "userId": {
          "type": "string",
          "description": "Reference to User. (Relationship: User 1:N Expense)"
        },
        "date": {
          "type": "string",
          "description": "The date the expense was incurred.",
          "format": "date-time"
        },
        "amount": {
          "type": "number",
          "description": "The amount of the expense."
        },
        "category": {
          "type": "string",
          "description": "The category of the expense (e.g., 'Rent', 'Supplies')."
        },
        "description": {
          "type": "string",
          "description": "A description of the expense."
        }
      },
      "required": [
        "id",
        "userId",
        "date",
        "amount",
        "category"
      ]
    },
    "Revenue": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Revenue",
      "type": "object",
      "description": "Represents a revenue stream recorded in the BizView application.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the Revenue entity."
        },
        "userId": {
          "type": "string",
          "description": "Reference to User. (Relationship: User 1:N Revenue)"
        },
        "date": {
          "type": "string",
          "description": "The date the revenue was received.",
          "format": "date-time"
        },
        "amount": {
          "type": "number",
          "description": "The amount of the revenue."
        },
        "category": {
          "type": "string",
          "description": "The category of the revenue (e.g., 'Sales', 'Services')."
        },
        "description": {
          "type": "string",
          "description": "A description of the revenue."
        }
      },
      "required": [
        "id",
        "userId",
        "date",
        "amount",
        "category"
      ]
    },
    "Appointment": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Appointment",
      "type": "object",
      "description": "Represents an appointment scheduled in the BizView application.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the Appointment entity."
        },
        "userId": {
          "type": "string",
          "description": "Reference to User. (Relationship: User 1:N Appointment)"
        },
        "startDateTime": {
          "type": "string",
          "description": "The date and time the appointment starts.",
          "format": "date-time"
        },
        "endDateTime": {
          "type": "string",
          "description": "The date and time the appointment ends.",
          "format": "date-time"
        },
        "title": {
          "type": "string",
          "description": "The title of the appointment."
        },
        "description": {
          "type": "string",
          "description": "A description of the appointment."
        }
      },
      "required": [
        "id",
        "userId",
        "startDateTime",
        "endDateTime",
        "title"
      ]
    }
  },
  "auth": {
    "providers": [
      "password",
      "anonymous"
    ]
  },
  "firestore": {
    "structure": [
      {
        "path": "/users/{userId}",
        "definition": {
          "entityName": "User",
          "schema": {
            "$ref": "#/backend/entities/User"
          },
          "description": "Stores user profile information. Accessible only to the user and potentially admins (if applicable).",
          "params": [
            {
              "name": "userId",
              "description": "The unique identifier of the user."
            }
          ]
        }
      },
      {
        "path": "/users/{userId}/expenses/{expenseId}",
        "definition": {
          "entityName": "Expense",
          "schema": {
            "$ref": "#/backend/entities/Expense"
          },
          "description": "Stores expense records for a specific user. Accessible only to the user who owns the expenses.",
          "params": [
            {
              "name": "userId",
              "description": "The unique identifier of the user."
            },
            {
              "name": "expenseId",
              "description": "The unique identifier of the expense."
            }
          ]
        }
      },
      {
        "path": "/users/{userId}/revenue/{revenueId}",
        "definition": {
          "entityName": "Revenue",
          "schema": {
            "$ref": "#/backend/entities/Revenue"
          },
          "description": "Stores revenue records for a specific user. Accessible only to the user who owns the revenue.",
          "params": [
            {
              "name": "userId",
              "description": "The unique identifier of the user."
            },
            {
              "name": "revenueId",
              "description": "The unique identifier of the revenue."
            }
          ]
        }
      },
      {
        "path": "/users/{userId}/appointments/{appointmentId}",
        "definition": {
          "entityName": "Appointment",
          "schema": {
            "$ref": "#/backend/entities/Appointment"
          },
          "description": "Stores appointment records for a specific user. Accessible only to the user who owns the appointments.",
          "params": [
            {
              "name": "userId",
              "description": "The unique identifier of the user."
            },
            {
              "name": "appointmentId",
              "description": "The unique identifier of the appointment."
            }
          ]
        }
      },
      {
        "path": "/users/{userId}/raw-materials/{rawMaterialId}",
        "definition": {
          "entityName": "RawMaterial",
          "schema": {
            "$ref": "#/backend/entities/RawMaterial"
          },
          "description": "Stores raw materials data for a specific user. Accessible only to the user who owns the raw materials.",
          "params": [
            {
              "name": "userId",
              "description": "The unique identifier of the user."
            },
            {
              "name": "rawMaterialId",
              "description": "The unique identifier of the raw material."
            }
          ]
        }
      }
    ],
    "reasoning": "The Firestore data structure is designed to address the \"Missing or insufficient permissions\" error by enforcing clear ownership and access control. The error indicates the user is trying to `list` `raw-materials` under their user document, but lacks the necessary permissions. To fix this, we'll use path-based ownership for the `raw-materials` collection, making sure only the logged-in user can access their own raw materials.\n\nThe structure prioritizes authorization independence and supports secure list operations (QAPs). User data and their related resources (expenses, revenue, appointments, and raw materials) are stored under their respective user document, enabling straightforward security rules based on `request.auth.uid`.\n\nAuthorization Independence:\nExpenses, Revenue, Appointments, and Raw Materials collections are nested under each user's document.  The `userId` field inside each document is redundant as it can always be infered by the path, but it is kept for code readabiliy. This eliminates the need for `get()` calls in the security rules, because every document in the collection has the `userId` field denormalized, ensuring atomic operations and simplifying debugging.\n\nQAPs:\nThe structure supports secure `list` operations because collections like `expenses`, `revenue`, `appointments`, and `raw-materials` are segregated under each user. The security rules only need to verify if the `request.auth.uid` matches the `userId` (in our design it must also match the path to the document, this double check can be ommited to improve performance).\n"
  }
}