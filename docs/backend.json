{
  "entities": {
    "Expense": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Expense",
      "type": "object",
      "description": "Represents an expense record.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the expense."
        },
        "userId": {
          "type": "string",
          "description": "Reference to the User who created the expense. (Relationship: User 1:N Expense)"
        },
        "date": {
          "type": "string",
          "description": "The date the expense was incurred.",
          "format": "date-time"
        },
        "amount": {
          "type": "number",
          "description": "The amount of the expense."
        },
        "category": {
          "type": "string",
          "description": "The category of the expense (e.g., 'Rent', 'Supplies')."
        },
        "description": {
          "type": "string",
          "description": "A description of the expense."
        }
      },
      "required": [
        "id",
        "userId",
        "date",
        "amount",
        "category"
      ]
    },
    "Revenue": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Revenue",
      "type": "object",
      "description": "Represents a revenue record.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the revenue."
        },
        "userId": {
          "type": "string",
          "description": "Reference to the User who created the revenue. (Relationship: User 1:N Revenue)"
        },
        "date": {
          "type": "string",
          "description": "The date the revenue was received.",
          "format": "date-time"
        },
        "amount": {
          "type": "number",
          "description": "The amount of the revenue."
        },
        "category": {
          "type": "string",
          "description": "The category of the revenue (e.g., 'Sales', 'Services')."
        },
        "description": {
          "type": "string",
          "description": "A description of the revenue."
        }
      },
      "required": [
        "id",
        "userId",
        "date",
        "amount",
        "category"
      ]
    },
    "Appointment": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Appointment",
      "type": "object",
      "description": "Represents a scheduled appointment.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the appointment."
        },
        "userId": {
          "type": "string",
          "description": "Reference to the User who created the appointment. (Relationship: User 1:N Appointment)"
        },
        "startTime": {
          "type": "string",
          "description": "The start time of the appointment.",
          "format": "date-time"
        },
        "endTime": {
          "type": "string",
          "description": "The end time of the appointment.",
          "format": "date-time"
        },
        "title": {
          "type": "string",
          "description": "The title of the appointment."
        },
        "description": {
          "type": "string",
          "description": "A description of the appointment."
        }
      },
      "required": [
        "id",
        "userId",
        "startTime",
        "endTime",
        "title"
      ]
    },
    "User": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "User",
      "type": "object",
      "description": "Represents a user of the application.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the user."
        },
        "name": {
          "type": "string",
          "description": "The user's full name."
        },
        "email": {
          "type": "string",
          "description": "The user's email address.",
          "format": "email"
        }
      },
      "required": [
        "id"
      ]
    }
  },
  "auth": {
    "providers": [
      "anonymous"
    ]
  },
  "firestore": {
    "structure": [
      {
        "path": "/users/{userId}",
        "definition": {
          "entityName": "User",
          "schema": {
            "$ref": "#/backend/entities/User"
          },
          "description": "Stores user profile information. Accessible only to the authenticated user.",
          "params": [
            {
              "name": "userId",
              "description": "The unique identifier of the user."
            }
          ]
        }
      },
      {
        "path": "/users/{userId}/expenses/{expenseId}",
        "definition": {
          "entityName": "Expense",
          "schema": {
            "$ref": "#/backend/entities/Expense"
          },
          "description": "Stores expense records for a specific user. Accessible only to the authenticated user.",
          "params": [
            {
              "name": "userId",
              "description": "The unique identifier of the user."
            },
            {
              "name": "expenseId",
              "description": "The unique identifier of the expense record."
            }
          ]
        }
      },
      {
        "path": "/users/{userId}/revenues/{revenueId}",
        "definition": {
          "entityName": "Revenue",
          "schema": {
            "$ref": "#/backend/entities/Revenue"
          },
          "description": "Stores revenue records for a specific user. Accessible only to the authenticated user.",
          "params": [
            {
              "name": "userId",
              "description": "The unique identifier of the user."
            },
            {
              "name": "revenueId",
              "description": "The unique identifier of the revenue record."
            }
          ]
        }
      },
      {
        "path": "/users/{userId}/appointments/{appointmentId}",
        "definition": {
          "entityName": "Appointment",
          "schema": {
            "$ref": "#/backend/entities/Appointment"
          },
          "description": "Stores appointment records for a specific user. Accessible only to the authenticated user.",
          "params": [
            {
              "name": "userId",
              "description": "The unique identifier of the user."
            },
            {
              "name": "appointmentId",
              "description": "The unique identifier of the appointment record."
            }
          ]
        }
      }
    ],
    "reasoning": "The Firestore data structure is designed to address the \"Missing or insufficient permissions\" error by enforcing clear ownership and access control. It leverages path-based ownership and denormalization to ensure Authorization Independence, enabling secure list operations and atomic transactions. The design strictly adheres to the principle of Structural Segregation, keeping data with different access requirements in separate collections.\n\n1.  **Path-Based Ownership:** User-specific data (expenses, revenues, appointments) is stored under `/users/{userId}/...`, ensuring that only the authenticated user can access their own data. This directly addresses the reported error by enforcing that a user can only `list` their own `sales` documents.\n2.  **Authorization Independence:** There is no hierarchical authorization, so rules do not require `get()` calls to parent documents.\n3.  **Structural Segregation:**  Each top-level collection (e.g., `users/{userId}/expenses`) contains data with the same access requirements (i.e., accessible only to the owning user). This simplifies the security rules by avoiding complex conditional logic based on document content.\n\nThis structure supports the required QAPs by:\n\n*   **Secure List Operations (QAP):**  The path-based ownership model ensures that `list` operations on subcollections like `/users/{userId}/expenses` only return documents owned by the authenticated user. No filtering is required in the rules.\n\n*   **Atomic Operations (QAP):**  The absence of hierarchical authorization dependencies (no `get()` calls) allows for atomic transactions and batches when creating related documents (e.g., creating a user and their initial set of expenses)."
  }
}
