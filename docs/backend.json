{
  "entities": {
    "User": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "User",
      "type": "object",
      "description": "Represents a user of the BizView application.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the user entity."
        },
        "name": {
          "type": "string",
          "description": "The user's full name."
        },
        "email": {
          "type": "string",
          "description": "The user's email address.",
          "format": "email"
        }
      },
      "required": [
        "id",
        "name",
        "email"
      ]
    },
    "Expense": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Expense",
      "type": "object",
      "description": "Represents an expense incurred by the business.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the expense entity."
        },
        "userId": {
          "type": "string",
          "description": "Reference to User. (Relationship: User 1:N Expense)"
        },
        "date": {
          "type": "string",
          "description": "The date the expense was incurred.",
          "format": "date-time"
        },
        "amount": {
          "type": "number",
          "description": "The amount of the expense."
        },
        "category": {
          "type": "string",
          "description": "The category of the expense (e.g., supplies, rent, utilities)."
        },
        "description": {
          "type": "string",
          "description": "A description of the expense."
        }
      },
      "required": [
        "id",
        "userId",
        "date",
        "amount",
        "category"
      ]
    },
    "Revenue": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Revenue",
      "type": "object",
      "description": "Represents a revenue stream for the business.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the revenue entity."
        },
        "userId": {
          "type": "string",
          "description": "Reference to User. (Relationship: User 1:N Revenue)"
        },
        "date": {
          "type": "string",
          "description": "The date the revenue was received.",
          "format": "date-time"
        },
        "amount": {
          "type": "number",
          "description": "The amount of the revenue."
        },
        "category": {
          "type": "string",
          "description": "The category of the revenue (e.g., sales, services)."
        },
        "description": {
          "type": "string",
          "description": "A description of the revenue."
        }
      },
      "required": [
        "id",
        "userId",
        "date",
        "amount",
        "category"
      ]
    },
    "Appointment": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Appointment",
      "type": "object",
      "description": "Represents a scheduled appointment.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the appointment entity."
        },
        "userId": {
          "type": "string",
          "description": "Reference to User. (Relationship: User 1:N Appointment)"
        },
        "startTime": {
          "type": "string",
          "description": "The start time of the appointment.",
          "format": "date-time"
        },
        "endTime": {
          "type": "string",
          "description": "The end time of the appointment.",
          "format": "date-time"
        },
        "title": {
          "type": "string",
          "description": "The title of the appointment."
        },
        "description": {
          "type": "string",
          "description": "A description of the appointment."
        }
      },
      "required": [
        "id",
        "userId",
        "startTime",
        "endTime",
        "title"
      ]
    }
  },
  "auth": {
    "providers": [
      "password",
      "anonymous"
    ]
  },
  "firestore": {
    "structure": [
      {
        "path": "/users/{userId}",
        "definition": {
          "entityName": "User",
          "schema": {
            "$ref": "#/backend/entities/User"
          },
          "description": "Collection of user profiles. User data is private and accessible only to the authenticated user with matching userId.",
          "params": [
            {
              "name": "userId",
              "description": "The unique identifier of the user."
            }
          ]
        }
      },
      {
        "path": "/users/{userId}/expenses/{expenseId}",
        "definition": {
          "entityName": "Expense",
          "schema": {
            "$ref": "#/backend/entities/Expense"
          },
          "description": "Collection of expenses for a specific user. Expenses are private and accessible only to the user with matching userId.",
          "params": [
            {
              "name": "userId",
              "description": "The unique identifier of the user."
            },
            {
              "name": "expenseId",
              "description": "The unique identifier of the expense."
            }
          ]
        }
      },
      {
        "path": "/users/{userId}/revenues/{revenueId}",
        "definition": {
          "entityName": "Revenue",
          "schema": {
            "$ref": "#/backend/entities/Revenue"
          },
          "description": "Collection of revenues for a specific user. Revenues are private and accessible only to the user with matching userId.",
          "params": [
            {
              "name": "userId",
              "description": "The unique identifier of the user."
            },
            {
              "name": "revenueId",
              "description": "The unique identifier of the revenue."
            }
          ]
        }
      },
      {
        "path": "/users/{userId}/appointments/{appointmentId}",
        "definition": {
          "entityName": "Appointment",
          "schema": {
            "$ref": "#/backend/entities/Appointment"
          },
          "description": "Collection of appointments for a specific user. Appointments are private and accessible only to the user with matching userId.",
          "params": [
            {
              "name": "userId",
              "description": "The unique identifier of the user."
            },
            {
              "name": "appointmentId",
              "description": "The unique identifier of the appointment."
            }
          ]
        }
      }
    ],
    "reasoning": "The Firestore data structure is designed to address the \"Missing or insufficient permissions\" error by enforcing clear ownership and authorization independence. The error indicates the user with UID `5FJJv6raB0hDsi1cirAUcpNT3L92` lacks permission to `list` documents under `users/5FJJv6raB0hDsi1cirAUcpNT3L92/sales`. To fix this, we leverage path-based ownership for private user data. All collections directly nested under `/users/{userId}` are considered private to that user.\n\nThe structure employs the following key principles:\n\n1.  **Authorization Independence:** The `Expense`, `Revenue`, and `Appointment` collections are located under each user's document (`/users/{userId}`). This eliminates the need for `get()` calls in security rules to verify ownership. The security rules can directly check if `request.auth.uid == userId`. This also supports atomic operations.\n\n2.  **Structural Segregation:** All documents within a given collection have the same security posture. For instance, all documents in `/users/{userId}/expenses` are private to the user.\n\n3.  **Access Modeling:** Path-based ownership (`/users/{userId}/expenses/{expenseId}`) is used to represent the `User 1:N Expense`, `User 1:N Revenue`, and `User 1:N Appointment` relationships. This ensures that only the authenticated user (`request.auth.uid`) can access their respective data.\n\n4. **QAPs (Rules are not Filters):** The nested structure ensures secure `list` operations. A user can only list collections under their own `userId`, enforcing data privacy. A rule simply verifies that `request.auth.uid == userId` on the `/users/{userId}/expenses` path, preventing unauthorized access.\n\nThis design avoids complex security rules based on document content and facilitates scalable and maintainable access control."
  }
}