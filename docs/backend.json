{
  "entities": {
    "Expense": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Expense",
      "type": "object",
      "description": "Represents an expense record.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the expense."
        },
        "userId": {
          "type": "string",
          "description": "Reference to the User who created the expense. (Relationship: User 1:N Expense)"
        },
        "amount": {
          "type": "number",
          "description": "The amount of the expense."
        },
        "category": {
          "type": "string",
          "description": "The category of the expense (e.g., supplies, rent, utilities)."
        },
        "date": {
          "type": "string",
          "description": "The date the expense was incurred.",
          "format": "date-time"
        },
        "description": {
          "type": "string",
          "description": "A description of the expense."
        }
      },
      "required": [
        "id",
        "userId",
        "amount",
        "category",
        "date"
      ]
    },
    "Revenue": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Revenue",
      "type": "object",
      "description": "Represents a revenue record.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the revenue."
        },
        "userId": {
          "type": "string",
          "description": "Reference to the User who created the revenue. (Relationship: User 1:N Revenue)"
        },
        "amount": {
          "type": "number",
          "description": "The amount of revenue."
        },
        "category": {
          "type": "string",
          "description": "The category of revenue (e.g., sales, service fees)."
        },
        "date": {
          "type": "string",
          "description": "The date the revenue was received.",
          "format": "date-time"
        },
        "description": {
          "type": "string",
          "description": "A description of the revenue."
        }
      },
      "required": [
        "id",
        "userId",
        "amount",
        "category",
        "date"
      ]
    },
    "Appointment": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Appointment",
      "type": "object",
      "description": "Represents a scheduled appointment.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the appointment."
        },
        "userId": {
          "type": "string",
          "description": "Reference to the User who created the appointment. (Relationship: User 1:N Appointment)"
        },
        "title": {
          "type": "string",
          "description": "The title of the appointment."
        },
        "startTime": {
          "type": "string",
          "description": "The start time of the appointment.",
          "format": "date-time"
        },
        "endTime": {
          "type": "string",
          "description": "The end time of the appointment.",
          "format": "date-time"
        },
        "location": {
          "type": "string",
          "description": "The location of the appointment."
        },
        "description": {
          "type": "string",
          "description": "A description of the appointment."
        }
      },
      "required": [
        "id",
        "userId",
        "title",
        "startTime",
        "endTime"
      ]
    },
    "User": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "User",
      "type": "object",
      "description": "Represents a user of the application.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the user."
        },
        "name": {
          "type": "string",
          "description": "The user's name."
        },
        "email": {
          "type": "string",
          "description": "The user's email address.",
          "format": "email"
        }
      },
      "required": [
        "id",
        "name",
        "email"
      ]
    },
    "Summary": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Summary",
      "type": "object",
      "description": "Represents a summary generated for an appointment.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the summary."
        },
        "appointmentId": {
          "type": "string",
          "description": "Reference to the Appointment the summary is for. (Relationship: Appointment 1:1 Summary)"
        },
        "summaryText": {
          "type": "string",
          "description": "The text of the generated summary."
        },
        "generationDate": {
          "type": "string",
          "description": "The date and time the summary was generated.",
          "format": "date-time"
        }
      },
      "required": [
        "id",
        "appointmentId",
        "summaryText",
        "generationDate"
      ]
    }
  },
  "auth": {
    "providers": [
      "password",
      "anonymous"
    ]
  },
  "firestore": {
    "structure": [
      {
        "path": "/users/{userId}",
        "definition": {
          "entityName": "User",
          "schema": {
            "$ref": "#/backend/entities/User"
          },
          "description": "Stores user profiles. Only the user themselves can read/write their profile.",
          "params": [
            {
              "name": "userId",
              "description": "The unique identifier for the user."
            }
          ]
        }
      },
      {
        "path": "/users/{userId}/expenses/{expenseId}",
        "definition": {
          "entityName": "Expense",
          "schema": {
            "$ref": "#/backend/entities/Expense"
          },
          "description": "Stores expense records for each user. Only the user can access their own expenses.",
          "params": [
            {
              "name": "userId",
              "description": "The unique identifier for the user."
            },
            {
              "name": "expenseId",
              "description": "The unique identifier for the expense."
            }
          ]
        }
      },
      {
        "path": "/users/{userId}/revenue/{revenueId}",
        "definition": {
          "entityName": "Revenue",
          "schema": {
            "$ref": "#/backend/entities/Revenue"
          },
          "description": "Stores revenue records for each user. Only the user can access their own revenue.",
          "params": [
            {
              "name": "userId",
              "description": "The unique identifier for the user."
            },
            {
              "name": "revenueId",
              "description": "The unique identifier for the revenue."
            }
          ]
        }
      },
      {
        "path": "/users/{userId}/appointments/{appointmentId}",
        "definition": {
          "entityName": "Appointment",
          "schema": {
            "$ref": "#/backend/entities/Appointment"
          },
          "description": "Stores appointment records for each user. Only the user can access their own appointments.",
          "params": [
            {
              "name": "userId",
              "description": "The unique identifier for the user."
            },
            {
              "name": "appointmentId",
              "description": "The unique identifier for the appointment."
            }
          ]
        }
      },
      {
        "path": "/users/{userId}/appointments/{appointmentId}/summary",
        "definition": {
          "entityName": "Summary",
          "schema": {
            "$ref": "#/backend/entities/Summary"
          },
          "description": "Stores the summary for an appointment, related to the user. Only the user can access their appointment's summaries.",
          "params": [
            {
              "name": "userId",
              "description": "The unique identifier for the user."
            },
            {
              "name": "appointmentId",
              "description": "The unique identifier for the appointment."
            }
          ]
        }
      },
      {
        "path": "/users/{userId}/finished-products/{productId}",
        "definition": {
          "entityName": "finished-products",
          "schema": {
            "$ref": "#/backend/entities/finished-products"
          },
          "description": "Stores finished products for each user. Only the user can access their own products.",
          "params": [
            {
              "name": "userId",
              "description": "The unique identifier for the user."
            },
            {
              "name": "productId",
              "description": "The unique identifier for the product."
            }
          ]
        }
      }
    ],
    "reasoning": "The Firestore data structure is designed to address the \"Missing or insufficient permissions\" error by ensuring authorization independence and clear ownership. The error indicates the user is trying to `list` documents under `/users/{userId}/finished-products`, suggesting an issue with the security rules for this path. The structure implements path-based ownership for user-specific data. Each user's data (expenses, revenue, appointments, and summaries) is stored under their respective user ID, following the pattern `/users/{userId}/{collection}`. This simplifies security rules, making them easier to understand and maintain. All subcollections under `/users/{userId}` implicitly inherit the user's ownership. The `finished-products` subcollection in the error message suggests that `finished-products` are owned by a user. To achieve Authorization Independence (Strategy A), we avoid `get()` calls in security rules. Since the error occurs on a `list` operation (QAP), the structure must allow secure listing. By structuring the data with path-based ownership and enforcing that all documents in a collection share the same security requirements, we can ensure only the authenticated user can list their own `finished-products`."
  }
}