{
  "entities": {
    "Expense": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Expense",
      "type": "object",
      "description": "Represents an expense record.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the expense entity."
        },
        "amount": {
          "type": "number",
          "description": "The amount of the expense."
        },
        "category": {
          "type": "string",
          "description": "The category of the expense (e.g., 'Rent', 'Utilities', 'Supplies')."
        },
        "date": {
          "type": "string",
          "description": "The date the expense was incurred.",
          "format": "date-time"
        },
        "description": {
          "type": "string",
          "description": "A description of the expense."
        },
        "businessId": {
          "type": "string",
          "description": "Reference to Business. (Relationship: Business 1:N Expense)"
        }
      },
      "required": [
        "id",
        "amount",
        "category",
        "date",
        "businessId"
      ]
    },
    "Revenue": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Revenue",
      "type": "object",
      "description": "Represents a revenue record.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the revenue entity."
        },
        "amount": {
          "type": "number",
          "description": "The amount of the revenue."
        },
        "category": {
          "type": "string",
          "description": "The category of the revenue (e.g., 'Sales', 'Services')."
        },
        "date": {
          "type": "string",
          "description": "The date the revenue was received.",
          "format": "date-time"
        },
        "description": {
          "type": "string",
          "description": "A description of the revenue."
        },
        "businessId": {
          "type": "string",
          "description": "Reference to Business. (Relationship: Business 1:N Revenue)"
        }
      },
      "required": [
        "id",
        "amount",
        "category",
        "date",
        "businessId"
      ]
    },
    "Appointment": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Appointment",
      "type": "object",
      "description": "Represents a scheduled appointment.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the appointment entity."
        },
        "title": {
          "type": "string",
          "description": "The title of the appointment."
        },
        "startTime": {
          "type": "string",
          "description": "The start time of the appointment.",
          "format": "date-time"
        },
        "endTime": {
          "type": "string",
          "description": "The end time of the appointment.",
          "format": "date-time"
        },
        "description": {
          "type": "string",
          "description": "A description of the appointment."
        },
        "businessId": {
          "type": "string",
          "description": "Reference to Business. (Relationship: Business 1:N Appointment)"
        }
      },
      "required": [
        "id",
        "title",
        "startTime",
        "endTime",
        "businessId"
      ]
    },
    "Business": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Business",
      "type": "object",
      "description": "Represents a business.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the business entity."
        },
        "name": {
          "type": "string",
          "description": "The name of the business."
        },
        "description": {
          "type": "string",
          "description": "A description of the business."
        },
        "ownerId": {
          "type": "string",
          "description": "Reference to UserProfile. (Relationship: UserProfile 1:N Business)"
        }
      },
      "required": [
        "id",
        "name",
        "ownerId"
      ]
    },
    "UserProfile": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "UserProfile",
      "type": "object",
      "description": "Represents a user profile.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the user profile entity."
        },
        "email": {
          "type": "string",
          "description": "The email address of the user.",
          "format": "email"
        },
        "name": {
          "type": "string",
          "description": "The name of the user."
        }
      },
      "required": [
        "id",
        "email",
        "name"
      ]
    }
  },
  "auth": {
    "providers": [
      "password",
      "anonymous"
    ]
  },
  "firestore": {
    "structure": [
      {
        "path": "/users/{userId}",
        "definition": {
          "entityName": "UserProfile",
          "schema": {
            "$ref": "#/backend/entities/UserProfile"
          },
          "description": "Stores user profile data. Accessible only by the user themselves.",
          "params": [
            {
              "name": "userId",
              "description": "The unique identifier of the user."
            }
          ]
        }
      },
      {
        "path": "/businesses/{businessId}",
        "definition": {
          "entityName": "Business",
          "schema": {
            "$ref": "#/backend/entities/Business"
          },
          "description": "Stores business data. The `ownerId` field determines ownership.",
          "params": [
            {
              "name": "businessId",
              "description": "The unique identifier of the business."
            }
          ]
        }
      },
      {
        "path": "/businesses/{businessId}/expenses/{expenseId}",
        "definition": {
          "entityName": "Expense",
          "schema": {
            "$ref": "#/backend/entities/Expense"
          },
          "description": "Stores expense records associated with a business.  Authorization relies on the `businessId` in the path.",
          "params": [
            {
              "name": "businessId",
              "description": "The unique identifier of the business."
            },
            {
              "name": "expenseId",
              "description": "The unique identifier of the expense."
            }
          ]
        }
      },
      {
        "path": "/businesses/{businessId}/revenues/{revenueId}",
        "definition": {
          "entityName": "Revenue",
          "schema": {
            "$ref": "#/backend/entities/Revenue"
          },
          "description": "Stores revenue records associated with a business. Authorization relies on the `businessId` in the path.",
          "params": [
            {
              "name": "businessId",
              "description": "The unique identifier of the business."
            },
            {
              "name": "revenueId",
              "description": "The unique identifier of the revenue."
            }
          ]
        }
      },
      {
        "path": "/businesses/{businessId}/appointments/{appointmentId}",
        "definition": {
          "entityName": "Appointment",
          "schema": {
            "$ref": "#/backend/entities/Appointment"
          },
          "description": "Stores appointment records associated with a business. Authorization relies on the `businessId` in the path.",
          "params": [
            {
              "name": "businessId",
              "description": "The unique identifier of the business."
            },
            {
              "name": "appointmentId",
              "description": "The unique identifier of the appointment."
            }
          ]
        }
      }
    ],
    "reasoning": "The Firestore structure is designed to support the BizView application, focusing on simplicity, security, and scalability. The core principle is Authorization Independence via denormalization, ensuring that security rules do not rely on hierarchical `get()` calls, which can break atomic operations and increase complexity.\n\nThe structure segregates user profiles and business data to ensure a consistent security posture for each collection.  Businesses are owned by users, and expenses, revenue, and appointments are associated with specific businesses.  This 1:N relationship is implemented using path-based ownership, simplifying security rules and improving query performance.\n\n**Authorization Independence (Denormalization):**\nEach `Expense`, `Revenue`, and `Appointment` document includes the `businessId`. The `Business` document contains the `ownerId`. No `get()` calls are needed to validate access because all relevant authorization information is available within the document itself or the authenticated user.\n\n**QAPs Support:**\n*   `list` operations are secure because they do not require filtering based on data in other documents (no `get()` calls to other documents). Access is controlled by the path and the `request.auth.uid`.\n\n**Global Roles:**\nGlobal roles are not required, as the application focuses on businesses managed by individual users.\n\n**Invariants:**\nThe structure supports the integrity of ownership by explicitly storing the `ownerId` in the `Business` document and `businessId` in related documents, which can be validated in security rules."
  }
}